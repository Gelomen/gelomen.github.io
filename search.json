[{"title":"Apaxy 美化静态资源导航页面","url":"/posts/apaxy-statistics/","content":"使用 Apaxy 美化静态资源页面的展示, 让文件能更直观和更美观的展示\n\n\n环境\n系统: Ubuntu 20.04 TLS\n服务: Apache\n框架: XAMPP\n\n安装进入 Apaxy 仓库发行标签页面: Apaxy Tags, 进入最新的 tag 下载最新版压缩包, 解压后进入目录, 将里面同名的 apaxy 目录下的 .htaccess 和 theme 目录拷贝到你的静态资源根目录下即可\n配置需要替换 .htaccess、header.html 和 footer.html 文件下的目录名字, 将 &#123;FOLDERNAME&#125; 替换成你当前静态资源所在目录, 比如我的静态资源 url 路径为 https://www.domain.com/static, 使用的是 XAMPP 框架, 资源路径是在 “&#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;static”, 那么将 &#123;FOLDERNAME&#125; 替换为 /static\n完成此时再次访问你的静态资源导航页面即可看到效果\n优化路径混淆有时资源的 url 路径做了比较深的隐藏以让普通用户无法猜测到, 比如为 https://www.domain.com/apps/static, 资源路径则在 “&#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;apps&#x2F;static” 下, 那么 .htaccess 和 theme 目录则放在根目录 /opt/lampp/htdocs/apps 下, 并修改 &#123;FOLDERNAME&#125; 为 /apps\n此时的静态资源导航页面也会把每一层目录都显示出来, home 的 url 路径是 https://www.domain.com/apps, 不完美, 因为 apps 这个目录只是为了做混淆、隐藏目的, 并不存放资源, 所以 home 目录应该是对应 https://www.domain.com/apps/static 这个 url, 修改 theme 目录下的 apaxy.js\ncd /opt/lampp/htdocs/appsvi theme/apaxy.js\n\n修改路径以让主题识别\napaxy.js// generate a breadcrumbvar uri = window.location.pathname.substr(13);var arr = uri.split(&#x27;/&#x27;);var url = &quot;/apps/static&quot;var bread = &#x27;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/apps/static&quot;&gt;Home&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#x27;;var cont = 1;arr.forEach(function(value)&#123;    url = url + &#x27;/&#x27; + value;    if(value != &#x27;&#x27;)&#123;        if(arr.length == cont+1)            bread += &quot;&lt;li class=&#x27;active&#x27;&gt;&quot;+decodeURI(value)+&quot;&lt;/li&gt;&quot;;        else            bread += &quot;&lt;li&gt;&lt;a href=&#x27;&quot;+url+&quot;&#x27;&gt;&quot;+decodeURI(value)+&quot;&lt;/a&gt;&lt;/li&gt;&quot;;    &#125;    cont++;&#125;);document.getElementById(&quot;breadcrumb&quot;).innerHTML = bread;uri = window.location.pathname.substr(1);if (uri.substring(uri.length-1) == &#x27;/&#x27;)&#123;    var indexes = document.getElementsByClassName(&#x27;indexcolname&#x27;),    i = indexes.length;    while (i--)&#123;        var a = indexes[i].getElementsByTagName(&#x27;a&#x27;)[0];        a.innerText = a.innerText.split(&quot;/&quot;)[0];        a.href =  a.getAttribute(&#x27;href&#x27;,2);    &#125;&#125;\n\nlightgallery 打开图片如果你的静态资源导航主要放图片, 那么可以让图片打开在当前页面的 lightgallery (即 lightbox 效果), 而不是独立页面打开图片\n重命名 header-lightgallery.html 和 footer-lightgallery.html 为 header.html 和 footer.html 并覆盖\ncd /opt/lamepp/htdosc/apps/thememv header.html header.html.bakmv footer.html footer.html.bakcp header-lightgallery.html header.htmlcp footer-lightgallery.html footer.html\n\n然后修改 footer.html 里的 &#123;FOLDERNAME&#125; 为 /apps, 保存完成后刷新页面点击图片即可看到效果\n隐藏 home 下 Parent Directory在 home 路径下, 下方文件列表依然显示 Parent Directory, 所以可以在 apaxy.js 最后添加代码以让它在 home 目录下隐藏\napaxy.js// auto hide Parent Directory row in Home pagecur_uri = window.location.pathname.substr(1);if(cur_uri == &quot;apps/static/&quot;) &#123;    var a = document.getElementsByClassName(&quot;even&quot;)[0].style.display=&quot;none&quot;;&#125;\n\n添加描述header.html 里的 &#123;HEADER-MESSAGE&#125;, 以及 footer.html 里的 &#123;FOOTER-MESSAGE&#125;, 都可以删除并添加自定义的 html 代码或文字描述\n","categories":["优化"],"tags":["apaxy","ubuntu","xampp","apache","statistics","optimize","优化"]},{"title":"《黑神话悟空》性能测试","url":"/posts/black-myth-wukong-benchmark-tool/","content":"《黑神话悟空》提前放出了性能测试工具, 赶紧看看我的电脑能有多少帧!\n\n\n配置\nCPU: 13700k\n主板: ASUS ROG MAXIMUS Z790 HERO\n显卡: NVIDIA RTX 4090 24G\n内存: 64G\n系统: Win11\n画质: 4K, 除了 DLSS 超采样清晰度, 其他全部最高\n\n特效拉满测试特效拉满情况下, 切换不同的 DLSS 超采样清晰度测试\nDLAA\n超采样清晰度: 100\n平均帧数: 43帧&#x2F;秒\n显存占用: 12.4GB\n\n[DLAA] 测试结果\n质量\n超采样清晰度: 88\n平均帧数: 72帧&#x2F;秒\n显存占用: 10.4GB\n\n[质量] 测试结果\n均衡\n超采样清晰度: 60\n平均帧数: 86帧&#x2F;秒\n显存占用: 9.8GB\n\n[均衡] 测试结果\n性能\n超采样清晰度: 53\n平均帧数: 101帧&#x2F;秒\n显存占用: 9.4GB\n\n[性能] 测试结果\n极致性能\n超采样清晰度: 38\n平均帧数: 135帧&#x2F;秒\n显存占用: 8.7GB\n\n[极致性能] 测试结果\n优化设置DLAA看了网上的科普, DLAA 并不属于 DLSS 而是抗锯齿, 不仅没有提高性能, 反而会更消耗性能\n偷帧的贼看了 B 站 up 主 Fallere013 的测试视频: 偷帧的贼-黑神话画面设置-先行版, 总结如下图:\n各种画质不同档位的性能差异\n影响性能和观感的选项\n\n\n选项\n原因\n\n\n\n垂直同步\n强行对齐刷新率影响帧数\n\n\n动态模糊\n镜头晃动会变模糊影响观感\n\n\n全景光线追踪\n很耗性能, 但光影确实不错\n\n\n阴影\n阴影计算对帧数影响很大\n\n\n全局光照\n对帧数影响很大, 但并没有 全景光线追踪 有那么大影响, 略有模糊感\n\n\n光影测试根据上一点提到的 影响性能和观感的选项, 关闭或调低这些选项分别测试\n全景光线追踪-低\n\n\n选项\n状态\n\n\n\n垂直同步\n关\n\n\n动态模糊\n关\n\n\nDLSS\n质量(80)\n\n\n帧生成\n开\n\n\n全景光线追踪\n低\n\n\n阴影\n高\n\n\n全局光照\n低\n\n\n其他\n影视级\n\n\n[全景光线追踪-低] 测试结果\n全景光线追踪-中\n\n\n选项\n状态\n\n\n\n垂直同步\n关\n\n\n动态模糊\n关\n\n\nDLSS\n质量(80)\n\n\n帧生成\n开\n\n\n全景光线追踪\n中\n\n\n阴影\n高\n\n\n全局光照\n低\n\n\n其他\n影视级\n\n\n测试结果如下:\n[全景光线追踪-中] 测试结果\n全景光线追踪-超高\n\n\n选项\n状态\n\n\n\n垂直同步\n关\n\n\n动态模糊\n关\n\n\nDLSS\n质量(80)\n\n\n帧生成\n开\n\n\n全景光线追踪\n超高\n\n\n阴影\n高\n\n\n全局光照\n低\n\n\n其他\n影视级\n\n\n测试结果如下:\n[全景光线追踪-超高] 测试结果\n全局光照-高\n\n\n选项\n状态\n\n\n\n垂直同步\n关\n\n\n动态模糊\n关\n\n\nDLSS\n质量(80)\n\n\n帧生成\n开\n\n\n全景光线追踪\n关\n\n\n阴影\n高\n\n\n全局光照\n高\n\n\n其他\n影视级\n\n\n[全局光照-高] 测试结果\n全局光照-超高\n\n\n选项\n状态\n\n\n\n垂直同步\n关\n\n\n动态模糊\n关\n\n\nDLSS\n质量(80)\n\n\n帧生成\n开\n\n\n全景光线追踪\n关\n\n\n阴影\n高\n\n\n全局光照\n超高\n\n\n其他\n影视级\n\n\n[全局光照-超高] 测试结果\n全局光照-影视级\n\n\n选项\n状态\n\n\n\n垂直同步\n关\n\n\n动态模糊\n关\n\n\nDLSS\n质量(80)\n\n\n帧生成\n开\n\n\n全景光线追踪\n关\n\n\n阴影\n高\n\n\n全局光照\n影视级\n\n\n其他\n影视级\n\n\n[全局光照-影视级] 测试结果\n结论\n全景光线追踪 对性能影响特别大, 明暗效果挺好\n全局光照 帧数要比开启 全景光线追踪 高很多, 所以倾向于 全局光照 多些\n全局光照 几个档位之间帧数差 [影视级 - 高]: 13 帧, [影视级 - 超高]: 4 帧, [超高 - 高]: 9 帧 \n综合考虑, 光影倾向于只打开 全局光照 影视级\n\n最终设置:\n\n\n\n选项\n状态\n\n\n\n垂直同步\n关\n\n\n动态模糊\n关\n\n\nDLSS\n质量(80)\n\n\n帧生成\n开\n\n\n全景光线追踪\n关\n\n\n视野距离\n影视级\n\n\n抗锯齿\n影视级\n\n\n后期处理\n影视级\n\n\n阴影质量\n高\n\n\n贴图质量\n影视级\n\n\n特效质量\n影视级\n\n\n毛发质量\n影视级\n\n\n植被质量\n影视级\n\n\n全局光照\n影视级\n\n\n反射质量\n影视级\n\n\n","categories":["日常"],"tags":["game","wukong","black myth","performance testing"]},{"title":"解决移动端点击输入框后页面会被放大问题","url":"/posts/fix-mobile-search-input-zoom/","content":"解决移动端点击搜索按钮后整个页面被放大问题\n\n\n在测试手机端页面输入框时, 点击后整个页面被放大, 并且在离开输入框、点击页面其他地方, 页面并不会恢复原来的比例, 很影响美观\n解决方法: 只需在页面头部加入两句 &lt;meta&gt; 标签语句即可, 若是用 WordPress 则在主题的 function.php 加入函数\nfunction.php// 手机端点击输入框防止页面放大function mobile_input_disable_zoom() &#123;    echo &#x27;&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot;&gt;&#x27;;    echo &#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,height=device-height,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;&#x27;;&#125;add_action(&#x27;wp_head&#x27;, &#x27;mobile_input_disable_zoom&#x27;);\n","categories":["优化"],"tags":["optimize","优化","wordpress","mobile","移动端","meta","search"]},{"title":"解决 ssh 连接自动断开","url":"/posts/fix-ssh-auto-disconnect/","content":"ssh 连接远程服务器时, 默认情况会自动断开, 需要修改设置以保持连接\n\n\n远程主机sudo vi /etc/ssh/sshd_config\n\n修改发送客户端 KeepAlive 时间间隔(秒) 和 超时次数\nsshd_config- ClientAliveInterval 0+ ClientAliveInterval 30- ClientAliveCountMax 3+ ClientAliveCountMax 30\n\n总时间为: 30 × 30, 即 15 分钟没有操作则终端断开, 保存并重启 ssh 服务\nservice sshd reload\n\n本地终端vi  ~/.ssh/config\n\n所有主机都是同样的间隔\nconfig+ Host *+     ServerAliveInterval 30\n","categories":["优化"],"tags":["optimize","优化","ssh","网络"]},{"title":"Git 优化","url":"/posts/git-opt/","content":"优化 Git 的命令和设置, 方便使用\n\n\n命令别名vi ~/.gitconfig\n添加命令别名\n.gitconfig[alias]    st = status    co = checkout    ci = commit    br = branch    sub = submodule    cp = cherry-pick    tail = log -3\n\n去掉 (END) 提示有可能会出现输入 git br 和 git log 后, 列表会出现 (END) 且需要手动输入 q 退出, 执行以下代码即可\ngit config --global pager.branch falsegit config --global pager.log false\n\n记住用户名和密码git config --global credential.helper store\n\ngit diff 去掉 ^Mgit config --global core.whitespace cr-at-eol\n\n忽略文件权限变化git config --global core.filemode false\n\ngit shell 中文文件显示git config --global core.quotepath false\n\n添加代理http代理git config --global https.proxy http://127.0.0.1:1080git config --global https.proxy https://127.0.0.1:1080\n\nsocks5代理git config --global http.proxy socks5://127.0.0.1:1080git config --global https.proxy socks5://127.0.0.1:1080\n\n取消代理git config --global --unset http.proxygit config --global --unset https.proxy\n","categories":["优化"],"tags":["optimize","优化","git"]},{"title":"Rebar3 安装","url":"/posts/install-rebar3/","content":"安装 rebar3 便于 Erlang 编译、配置管理和发布\n\n\n下载或生成 rebar3编译过的稳定版下载 rebar3 文件并赋予可执行属性\nwget https://s3.amazonaws.com/rebar3/rebar3 &amp;&amp; chmod +x rebar3\n\n从源码编译生成前提是已经 安装 Erlang, 然后从仓库将源文件拉取下来并编译生成 rebar3\ngit clone https://github.com/erlang/rebar3.gitcd rebar3./bootstrap\n完成后在目录下会出现 rebar3 文件\n安装./rebar3 local install\n\n将会看到\n===&gt; Extracting rebar3 libs to YourHome/.cache/rebar3/lib...===&gt; Writing rebar3 run script YourHome/.cache/rebar3/bin/rebar3...===&gt; Add to $PATH for use: export PATH=YourHome/.cache/rebar3/bin:$PATH\n\n添加全局环境变量sudo vi /etc/profile\n\n复制安装后提示的 export 语句, 并在 profile 最后加入\nconfig profile+ export PATH=~/.cache/rebar3/bin:$PATH\n\n测试rebar3 compile\n","categories":["应用"],"tags":["rebar3","erlang","app","application","应用"]},{"title":"Linux SWAP 空间大小配置","url":"/posts/linux-swap-config/","content":"用了瓦工的鸡鸡内存有点小, 只有 512M, 而自动生成的交换空间 SWAP 也只有 132M, 跑 MySQL 很容易挂, 所以需要增大 SWAP 空间\n\n\n环境系统: Ubuntu 20.04 LTS\n配置 SWAP查看内存和交换空间大小, 使用 free 确认当前是否有交换空间并查看大小, -m 代表以 M 为单位, -h 代表以 G 为单位\nfree -m              total        used        free      shared  buff/cache   availableMem:            493         130          82           2         280         340Swap:           132           0         132\n\n新建交换空间文件默认 SWAP 文件在系统根目录下, 我们可以直接创建新的文件\n\nof 参数是交换空间文件的路径和名字, 这里依然放在系统根目录, 但为了名字不与原来但 SWAP 冲突, 则命名为 SWAPFILE\nbs 参数是块大小, 这里是每块 1M\ncount 参数是总共块的数量, 这里设置 2048 块, 所以新建的交换空间大小为：1M × 2048 = 2G\n\nsudo dd if=/dev/zero of=/swapfile  bs=1M count=2048\n\n格式化交换空间sudo mkswap /swapfile\n\n启用交换空间文件sudo swapon /swapfile\n\n此时可以查看是否生效\nfree -m              total        used        free      shared  buff/cache   availableMem:            493         124          81           2         286         346Swap:          2048           0        2048\n\n添加开机启动如果不添加开机启动, 则在下次重启机器后会自动被清除, 修改 fstab 文件\nsudo vi /etc/fstab\n\n删除里面 &#x2F;swap 开头的那一行, 并添加一行\nfstab- /swap swap swap defaults 0 0+ /swapfile swap swap defaults 0 0\n\n保存并重启\nsudo reboot\n\n验证重启成功后, 进入服务器查看当前交换空间大小\nfree -m              total        used        free      shared  buff/cache   availableMem:            493         124          81           2         286         346Swap:          2047           1        2048\n\n可以看到生效了, 而旧的交换空间文件 /swap 也可以删除了\nsudo rm /swap\n","categories":["优化"],"tags":["optimize","优化","linux","spaw","交换空间"]},{"title":"Nginx 搭配 WordPress 无法使用固定链接解决办法","url":"/posts/nginx-wordpress-permalink/","content":"网站改为用 宝塔 Nginx 搭建后, 原有的文章固定链接 Permalink 访问后都成了 404\n\n\n将网站从国外服务器迁移到国内腾讯云, 从原来的手动安装 Apache、PHP、MySQL 方式, 改为用 宝塔 Nginx 搭建, 原有的文章固定链接 Permalink 访问后都成了 404, 解决方法很简单: \n进入 宝塔控制面板 – 网站 – 当前网站空间 – 设置 – 配置文件, 在 server&#123;&#125; 里面添加配置\nserver &#123;    ...    location / &#123;        try_files $uri $uri/ /index.php?$args;    &#125;    rewrite /wp-admin$ $scheme://$host$uri/ permanent;    ...&#125;\n\n完成点击 保存, 回到网站刷新文章即可\n","categories":["建站"],"tags":["wordpress","nginx","website","宝塔","宝塔面板","bt"]},{"title":"使用 Ubuntu-18.04 和 WordPress 搭建博客","url":"/posts/ubuntu-1804-wordpress/","content":"WordPress 有很优秀的博客文章管理, 也有很多的主题和插件可以制作各种各样的网站, 甚至购物网站, 这篇文章将帮助你基于 Ubuntu-18.04 部署 WordPress 搭建博客\n\n\n环境\n系统: Ubuntu 18.04 ×64\n服务: Apache 2\n语言: PHP 7.4\n数据库: MySQL 5.7\n网站框架: WordPress 5.4.2–zh_CN\n\n安装更新系统sudo apt updatesudo apt upgrade\n\n添加 ppa 源sudo apt install software-properties-common -ysudo add-apt-repository ppa:ondrej/phpsudo apt updatesudo apt upgrade\n\n安装所需要的软件Apachesudo apt install apache2 -y\n\nPHPsudo apt install php7.4 -ysudo apt install libapache2-mod-php7.4 -y\n\nMySQLsudo apt install php7.4-mysql -ysudo apt install mysql-server -y\n\nWordPress到官方简体中文网手动下载: cn.wordpress.org&#x2F;download 或者执行: \nwget https://cn.wordpress.org/latest-zh_CN.tar.gz\n\n下载后解压并拷贝到目录 /var/www/html/ 下\ntar zxf latest-zh_CN.tar.gzsudo mv -f wordpress/ /var/www/html/\n\n配置修改 wordpress 文件夹的所有者和读写属性cd /var/www/html/\n\n将 wp 替换为你的用户名www-data 是服务器的默认组\nsudo chown -R wp:www-data wordpress\n\n修改读写属性sudo chmod 777 -R wordpress\n\n启用 Apache Rewrite 操作让其能够重定向你的访问链接\nsudo a2enmod rewrite\n\n配置 MySQL 数据库用于后面的网站数据存储, 先给 MySQL 控制台 root 用户添加免密登录\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n\n在最后一行添加\nmysqld.cnf+ skip-grant-tables\n\n重启服务后进入 MySQL 控制台\nsudo service mysql restart  # 重启服务mysql -u root -p            # 直接回车进入\n\n修改 MySQL root 用户的密码将 xxxxxx 替换为你自己的密码\nupdate mysql.user set authentication_string=PASSWORD(&#x27;xxxxxx&#x27;), plugin=&#x27;mysql_native_password&#x27; where user=&#x27;root&#x27;;flush privileges;exit\n\n这样下次进入时就使用自己定义的密码登录 MySQL 控制台了, 然后记得回到 mysqld.cnf 把刚刚添加的 skip-grant-tables 删除, 否则不安全\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n删除\nmysqld.cnf- skip-grant-tables\n\n重启服务\nsudo service mysql restart\n\n创建数据库将 xxxxxx 替换为你自己的密码\ncreate database wordpressdb;create user wordpress@localhost IDENTIFIED BY &#x27;xxxxxx&#x27;;GRANT ALL PRIVILEGES ON wordpressdb.* TO wordpress@localhost;FLUSH PRIVILEGES;exit\n\n配置 Apache 主页sudo vi /etc/apache2/sites-enabled/000-default.conf\n\n修改主页在 wordpress 目录下000-default.conf- DocumentRoot /var/www/html+ DocumentRoot /var/www/html/wordpress\n\n修改 Apache 服务器对文件夹的读写限制sudo vi /etc/apache2/apache2.conf\n\n将原来的\napache2.conf  &lt;Directory /var/www/&gt;-     Options Indexes FollowSymLinks+     Options FollowSymLinks-     AllowOverride None+     AllowOverride All      Require all granted  &lt;/Directory&gt;\n\n并在最后添加一行域名地址, 否则重启服务会报错\napache2.confServerName www.domain.com\n\n修改 WordPress 数据库配置cd /var/www/html/wordpress/cp wp-config-sample.php wp-config.phpsudo vi wp-config.php\n\n将要连接的数据库设置为前面 MySQL 控制台所配置的\nwp-config.php// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** ///** WordPress数据库的名称 */define( &#x27;DB_NAME&#x27;, &#x27;wordpressdb&#x27; );/** MySQL数据库用户名 */define( &#x27;DB_USER&#x27;, &#x27;wordpress&#x27; );/** MySQL数据库密码 */// 将 xxxxxx 替换为前面配置数据的密码define( &#x27;DB_PASSWORD&#x27;, &#x27;xxxxxx&#x27; );\n\n并在最后面添加 WordPress 进行更新时免登录的配置\nwp-config.php+ define(&quot;FS_METHOD&quot;, &quot;direct&quot;);+ define(&quot;FS_CHMOD_DIR&quot;, 0777);+ define(&quot;FS_CHMOD_FILE&quot;, 0777);\n\n重启服务\nsudo service mysql restartsudo apache2ctl restart\n\n到这里已经可以用你的域名访问 WordPress 进行网站的初始化配置了~\nssl 配置若你的域名是 http 类型的, 可以在阿里云申请免费 ssl 证书, 将 http 升级为 https, 申请比较简单这里就不说了\n选择 Apache 服务器类型的证书下载, 并上传到 /etc/apache2/xxx 目录下, 如 /etc/apache2/cert\n启用 SSL 模块sudo a2enmod ssl\n\n可以执行命令查看是否自动生成 default-ssl.conf 文件\nll /etc/apache2/sites-available/\n\n应该会看到\ntotal 20drwxr-xr-x 2 root root 4096 Jun 22 12:26 ./drwxr-xr-x 9 root root 4096 Jun 22 12:27 ../-rw-r--r-- 1 root root 1342 Jun 22 10:28 000-default.conf-rw-r--r-- 1 root root 6308 Jun 22 10:47 default-ssl.conf\n\n修改 SSL 配置文件sudo vi /etc/apache2/sites-available/default-ssl.conf\n\n将对应的参数修改为你自己的内容\ndefault-ssl.conf&lt;IfModule mod_ssl.c&gt;    &lt;VirtualHost *:443&gt;        # 添加ServerName, 域名替换为你自己的        ServerName www.domain.com        DocumentRoot /var/www/html/wordpress        ...        SSLCertificateFile /etc/apache2/cert/cert.crt        SSLCertificateKeyFile /etc/apache2/cert/cert.key        ...        SSLCertificateChainFile /etc/apache2/cert/chain.crt\n\n创建软连接进行关联sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf\n\n重新加载 Apache 配置文件\nsudo /etc/init.d/apache2 force-reload\n\n重启 Apache 服务\nsudo /etc/init.d/apache2 restart\n\n然后使用 https://www.domain.com 访问你的域名, 看是否能正常访问并且域名左边有个小锁头, 说明成功~\n强制 https 访问cd /var/www/html/wordpress/sudo vi .htaccess\n\n在配置里最后增加两行, 必须在 &lt;IfModule&gt; 以外, 否则会被自动重写从而丢失\n.htaccess  &lt;/IfModule&gt;+ ## END WordPress+ ## 强制 HTTPS 访问+ RewriteCond %&#123;SERVER_PORT&#125; !^443$+ RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]\n\n这样用 http 访问也会自动跳转到 https, 同时最好也在 WordPress 后台管理的 个人资料 和 设置 里面的把 站点&#x2F;域名 都改为 https 类型的\n美化 WordPress 搜索 url将搜索后的 url 从 https://www.domain.com/?s=搜索词 变为 https://www.domain.com/search/搜索词\n在主题函数模板 functions.php 最后添加即可\nfunctions.php//搜索美化伪静态function change_search_url_rewrite() &#123;    if ( is_search() &amp;&amp; ! empty( $_GET[&#x27;s&#x27;] ) ) &#123;        wp_redirect( home_url( &#x27;/search/&#x27; ) . urlencode( get_query_var( &#x27;s&#x27; ) ) );        exit();    &#125; elseif ( is_search() &amp;&amp; empty( get_query_var( &#x27;s&#x27; ) ) ) &#123;        wp_redirect( home_url( &#x27;/search&#x27; ) );        exit();    &#125;&#125;add_action( &#x27;template_redirect&#x27;, &#x27;change_search_url_rewrite&#x27; );\n\n安装 PHP 模组安装完后在 管理后台 – 工具 – 站点健康 会看到 WordPress 检测到 PHP 缺失的模组, 根据提示的模组名字一个个安装即可, 比如 curl\napt-cache search curl | grep php\n\n可能得到:\nphp7.2-curl - CURL module for PHPphp-http-request2 - Provides an easy way to perform HTTP requestsphp-curl - CURL module for PHP [default]php5.6-curl - CURL module for PHPphp7.0-curl - CURL module for PHPphp7.1-curl - CURL module for PHPphp7.3-curl - CURL module for PHPphp7.4-curl - CURL module for PHP\n\n根据搜索结果安装与当前 php 版本相同的模组\nsudo apt install php7.4-curl -y\n\n提示缺失的模组全部安装完后重启 Apache2 服务即可\nsudo /etc/init.d/apache2 restart\n\n又或者直接执行下面命令, 全部一次性安装\nsudo apt install php-curl php-gd php-xml php-mbstring  php-xmlrpc php-zip php-soap php-intl php-imagick -ysudo /etc/init.d/apache2 restart\n","categories":["建站"],"tags":["ubuntu","apache","wordpress","mysql","php","blog"]},{"title":"Ubuntu 20.04 Apache2 CORS","url":"/posts/ubuntu-2004-apache2-cors/","content":"解决 Ubuntu 20.04 下 Apache2 CORS 问题\n\n\n修改配置, 开启 Header 功能\nsudo a2enmod headers\n\n修改 Apache 配置, 其他系统是 httpd.conf, 但在 Ubuntu 系统中是 /etc/apache2/apache2.conf\nsudo vi /etc/apache2/apache2.conf\n\n在 &lt;Directory /var/www/&gt; 下添加一行 Access-Control-Allow-Origin 的配置\napache2.conf  &lt;Directory /var/www/&gt;      Options FollowSymLinks      AllowOverride All      Require all granted+     Header set Access-Control-Allow-Origin *  &lt;/Directory&gt;\n\n保存退出, 然后检测配置是否有错\napachectl -t\n\n正常情况应该得到\nSyntax OK\n\n重新加载配置并重启服务即可\nsudo /etc/init.d/apache2 force-reloadsudo /etc/init.d/apache2 restart\n","categories":["建站"],"tags":["ubuntu","apache","cors","跨域"]},{"title":"Ubuntu Apache2 Alias 映射目录","url":"/posts/ubuntu-apache2-alias-virtual-host/","content":"在 Ubuntu Apache2 下使用 Alias 关联虚拟目录到某个路径\n\n\nUbuntu 系统, 如果你的网站不在 Apache2 的 /var/www/html 目录下, 可以使用 Alias 绑定自定义目录, 同时可以起到自定义为自己要的 url 路径作用\nsudo vi /etc/apache2/apache2.conf\n在最后添加\napache2.conf+ Alias /custom_name /some/directory/web\n\n访问的时候就可以这样: http://www.yourdomain.com/custom_name 访问 Alias 所映射目录下的资源\n","categories":["建站"],"tags":["ubuntu","apache","virtual host"]},{"title":"Ubuntu 终端优化","url":"/posts/ubuntu-bash-opt/","content":"修改 .bashrc 等配置优化 ubuntu shell \n\n\n简化 PS1修改 .bashrc\nvi ~/.bashrc\n\n添加 PS1 配置\n.bashrc+ export PS1=&quot;\\[\\e]0;$&#123;debian_chroot:+($debian_chroot)&#125;\\w\\a\\]\\[\\e[35;1m\\]\\u \\[\\e[37;1m\\]in \\[\\e[36;1m\\]\\W \\[\\e[0m\\]&quot;\n\n应用环境变量 或 开启新终端\nsource ~/.bashrc\n\n终端将从\ngelomen@GELOMEN-PC:~$\n\n变为\ngelomen in ~ \n\n忽略大小写vi ~/.inputrc\n\n添加\n.inputrcset completion-ignore-case on\n\n解决左右跳单词 ;5D;5Cvi ~/.inputrc\n\n添加\n.inputrc+ &quot;\\e[1;5C&quot;: forward-word     # ctrl + →+ &quot;\\e[1;5D&quot;: backward-word    # ctrl + ←\n","categories":["优化"],"tags":["ubuntu","optimize","优化","bash","shell","美化"]},{"title":"Ubuntu 20.04 安装 Erlang/OTP 19.3.6.13","url":"/posts/ubuntu-erlang-otp-19/","content":"通过官方默认方式安装旧版 Erlang OTP 19\n\n\n部署新环境发现 erlang-solutions 已经没有旧版可以下载了, 只能通过官方默认方式安装旧版\n安装组件添加源\nsudo vi /etc/apt/sources.list# 末尾添加deb http://security.ubuntu.com/ubuntu bionic-security main\n\n更新源\nsudo apt update\n\n安装组件\nsudo apt install libncurses-dev build-essential libssl1.0-dev m4 libwxgtk3.0-gtk3-dev libglu-dev fop xsltproc g++ default-jdk make automake autoconf\n\n下载源码wget https://github.com/erlang/otp/archive/refs/tags/OTP-19.3.6.13.tar.gz\n\n解压源码包解压包并进入目录\ntar zxf OTP-19.3.6.13.tar.gzcd otp-OTP-19.3.6.13/\n\n编译编译源码并生成 ./configure 和 Makefile 文件\n./otp_build autoconf\n\n配置./configure --with-ssl --prefix=/usr/local/erlang\n\n安装make &amp;&amp; make install````## 环境变量修改 `/etc/profile````bashsudo vi /etc/profile\n\n设置 erlang 环境变量, ERL_PATH 是前面指定的安装路径, 若没指定则用 whereis erlang 查看默认安装目录:\n/etc/profileERL_PATH=/usr/local/erlang/binPATH=$ERL_PATH:$PATH\n\n运行gelomen in ~ erlErlang/OTP 19 [erts-8.3.5.7] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] Eshell V8.3.5.7  (abort with ^G)1&gt;\n","categories":["应用"],"tags":["ubuntu","erlang","app","application","应用"]},{"title":"修复 Ubuntu Sub-process dpkg 错误码 1 问题","url":"/posts/ubuntu-sub-process-dpkg-error/","content":"解决 Ubuntu 执行 sudo apt update 更新时 dpkg 提示错误 \n\n\nUbuntu 20.04 LTS 更新升级时, 提示这个错误\nsudo apt updatesudo apt upgrade...Sub-process /usr/bin/dpkg returned an error code (1)\n\n解决方法如下:\n备份 info 目录, 并建立新的 info 目录\nsudo mv /var/lib/dpkg/info /var/lib/dpkg/info.baksudo mkdir /var/lib/dpkg/info\n\n再次执行更新:\nsudo apt updatesudo apt upgrade\n\n这时候就能更新成功了, 但还没完, 将新的 info 目录下移动到旧目录:\nsudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info.bak\n\n将新 info 目录删除, 并恢复旧 info 目录命名\nsudo rm -rf /var/lib/dpkg/infosudo mv /var/lib/dpkg/info.bak /var/lib/dpkg/info\n","categories":["系统"],"tags":["ubuntu","dpkg","error"]},{"title":"Ubuntu XAMPP PHPMyAdmin 优化","url":"/posts/ubuntu-xampp-phpmyadmin-optimize/","content":"优化 PHPMyAdmin 提高安全性\n\n\n远程主机 Ubuntu 安装 XAMPP 后, 附带的 phpmyadmin 开启运行远程登录, 并没有提示登录就直接进入 MySQL 管理界面, 很不安全, 修改相关配置可以让其使用 https 访问并登录后才能进入, 提高安全性\n允许外网访问配置 httpd-xampp.conf 使其允许外网访问\nsudo vi /opt/lampp/etc/extra/httpd-xampp.conf\n\n找到 &lt;Directory “/opt/lampp/phpmyadmin”&gt; 修改参数\nhttpd-xampp.conf&lt;Directory &quot;/opt/lampp/phpmyadmin&quot;&gt;-    Require local 这一行修改为+    Require all granted\n\n保存并重启 Apache 服务\nsudo /opt/lampp/lampp restartapache\n\n此时访问 https://www.domain.com/phpmyadmin 即可进入 MySQL 管理页面\n账户密码登录首先给 localhost 的 root 用户添加密码, 点击 phpmyadmin 的 账户 标签, 在下方找到 用户名 root – 主机名 localhost 一行后面点击 修改权限\nphpmyadmin 账户\n点击 修改密码 按钮, 在下方输入密码, 点击 执行 按钮保存\n修改密码\n然后修改 phpmyadmin 配置文件, 使其不能自动登录\nsudo vi /opt/lampp/phpmyadmin/config.inc.php\n\n修改以下参数\n$cfg[&#x27;blowfish_secret&#x27;] = &#x27;myblowfishsecretmyblowfishsecret&#x27; # 自定义且尽量长/* Authentication type */$cfg[&#x27;Servers&#x27;][$i][&#x27;auth_type&#x27;] = &#x27;cookie&#x27;;\n\n修改后保存并重启 XAMPP 服务\nsudo /opt/lampp/lampp restart```![img.png](img.png)重启后访问 https://www.domain.com/phpmyadmin 即可看到需要账号密码登录![phpmyadmin 登录](/images/posts/ubuntu-xampp-wordpress/img3.png)## phpmyadmin 强制 HTTPS 访问默认使用 `http` 访问 `phpmyadmin` 是不会重定向到 `https` 的, 不安全, 所以可以修改配置让其重定向```bashsudo vi /opt/lampp/etc/extra/httpd-xampp.conf\n\n找到 &lt;IfModule mod_perl.c&gt;, 在里面添加\nhttpd-xampp.conf&lt;IfModule mod_perl.c&gt;        ...+       PerlSendHeader On +       # 强制 HTTPS 访问+       RewriteEngine On+       RewriteCond %&#123;SERVER_PORT&#125; !^443$+       RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]&lt;/IfModule&gt;\n\n然后重启 Apache 服务, 再次用 http 访问 phpmyadmin 就可以自动跳转到 https\nsudo /opt/lampp/lampp restartapache\n","categories":["优化"],"tags":["ubuntu","xampp","optimize","优化","mysql","php","phpmyadmin"]},{"title":"使用 Ubuntu 20.04 XAMPP WordPress 搭建博客","url":"/posts/ubuntu-xampp-wordpress/","content":"使用 Ubuntu XAMPP WordPress 便捷搭建博客\n\n\n环境\n系统: Ubuntu 20.04 LTS\n服务: XAMPP (Apache + MySQL + PHP + PERL)\n框架: WordPress\n\n安装更新系统先将 Ubuntu 系统更新到最新\nsudo apt updatesudo apt upgrade -y\n\n安装 XAMPP到 XAMPP 官网, 选择 Linux 版本下载, 在弹出的新页面复制地址栏链接, 然后在 Ubuntu 主机下载\n# 这个链接可能是旧的, 以官网提供的地址为准wget https://www.apachefriends.org/xampp-files/7.4.8/xampp-linux-x64-7.4.8-0-installer.run\n\n赋予安装文件可执行权限\nchmod +x ./xampp-linux-x64-7.4.8-0-installer.run\n\n以 root 身份安装, 安装过程提示的内容都默认即可\nsudo ./xampp-linux-x64-7.4.8-0-installer.run\n\n安装完成后, XAMPP 目录在 /opt/lampp 下\n安装 WordPress到官方简体中文网手动下载: WordPress 官网 或者执行:\nwget https://cn.wordpress.org/latest-zh_CN.tar.gz\n\n下载后解压并移动到目录 /opt/lampp/htdocs 下\ntar zxf latest-zh_CN.tar.gzsudo mv -f wordpress/ /opt/lampp/htdocs/\n\n配置到此最好有域名, 然后生成 SSL 证书, 如何生成证书这里就不赘述了\n配置 HTTPsudo vi /opt/lampp/etc/httpd.conf\n\n将以下参数修改为自己的信息\nServerName www.domain.com:80DocumentRoot &quot;/opt/lampp/htdocs/wordpress&quot;&lt;Directory &quot;/opt/lampp/htdocs/wordpress&quot;&gt;\n\n修改后保存并重启 Apache 服务\nsudo /opt/lampp/lampp restartapache\n\n服务重启成功后, 使用 http://www.domain.com 访问你的域名就可以进入 WordPress 配置界面了\n升级 HTTPSsudo vi /opt/lampp/etc/extra/httpd-ssl.conf\n\n将以下参数修改为自己的信息\n&lt;VirtualHost *:443&gt;DocumentRoot &quot;/opt/lampp/htdocs/wordpress&quot;ServerName www.domain.com:443ServerAlias domain.com:443# 并找到下面三个参数修改为自定义证书路径SSLCertificateFile &quot;/server/cert/cert.crt&quot;SSLCertificateKeyFile &quot;/server/cert/cert.key&quot;SSLCertificateChainFile &quot;/server/cert/chain.crt&quot;\n\n修改后保存并重启 Apache 服务\nsudo /opt/lampp/lampp restartapache\n\n服务重启成功后, 就可以使用 https://www.domain.com 访问你的网站\n数据库配置允许 phpmyadmin 外网访问\nXAMPP 自带 MySQL, 同时也自带了 phpmyadmin, 方便管理数据库, 首先配置 httpd-xampp.conf 使其允许外网访问\nsudo vi /opt/lampp/etc/extra/httpd-xampp.conf\n\n找到 &lt;Directory “/opt/lampp/phpmyadmin”&gt; 修改参数\nhttpd-xampp.conf&lt;Directory &quot;/opt/lampp/phpmyadmin&quot;&gt;-    Require local+    Require all granted\n\n保存并重启 Apache 服务\nsudo /opt/lampp/lampp restartapache\n\n此时访问 https://www.domain.com/phpmyadmin 即可进入 MySQL 管理页面\nphpmyadmin 账户登录目前外网可以直接访问 phpmyadmin, 没有提示登录, 这样任何人只要尝试访问都可以进入 MySQL 管理页面, 这样很危险, 所以需要修改 phpmyadmin 为账户登录方式进入\n首先给 localhost 的 root 用户添加密码, 点击 phpmyadmin 的 账户 标签, 在下方找到 用户名 root – 主机名 localhost 一行后面点击 修改权限\nphpmyadmin 账户\n点击 修改密码 按钮, 在下方输入密码, 点击 执行 按钮保存\n修改密码\n然后修改 phpmyadmin 配置文件, 使其不能自动登录\nsudo vi /opt/lampp/phpmyadmin/config.inc.php\n\n修改以下参数\n$cfg[&#x27;blowfish_secret&#x27;] = &#x27;myblowfishsecretmyblowfishsecret&#x27; # 自定义且尽量长/* Authentication type */$cfg[&#x27;Servers&#x27;][$i][&#x27;auth_type&#x27;] = &#x27;cookie&#x27;;\n\n修改后保存并重启 XAMPP 服务\nsudo /opt/lampp/lampp restart\n\n重启后访问 https://www.domain.com/phpmyadmin 即可看到需要账号密码登录\nphpmyadmin 登录\nphpmyadmin 强制 HTTPS 访问默认使用 http 访问 phpmyadmin 是不会重定向到 https 的, 不安全, 所以可以修改配置让其重定向\nsudo vi /opt/lampp/etc/extra/httpd-xampp.conf\n\n找到 &lt;IfModule mod_perl.c&gt;, 在里面添加\nhttpd-xampp.conf&lt;IfModule mod_perl.c&gt;        ...+       PerlSendHeader On +       # 强制 HTTPS 访问+       RewriteEngine On+       RewriteCond %&#123;SERVER_PORT&#125; !^443$+       RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]&lt;/IfModule&gt;\n\n然后重启 Apache 服务, 再次用 http 访问 phpmyadmin 就可以自动跳转到 https\nsudo /opt/lampp/lampp restartapache\n\nWordPress 账号和数据库需要创建 WordPress 专用的 MySQL 账户和数据库\n创建数据库登录 phpmyadmin 后, 点击左侧数据库列表最顶部的 新建 或者点击 数据库 标签新建数据库, 数据库名字自定义, 最好是加上前缀, 比如我的数据库名字为: clv_wp_db, 点击 创建 按钮\n创建数据库\n新建账户点击左侧数据库列表新建的数据库, 然后点击 权限 标签, 就可以看到该数据库下的账户权限, 点击下方的 新增用户账户 按钮\n新增用户账户\n输入 账号 和 密码, 主机名选择 本地, 并滚动到下方将数据库全局权限的 全选 勾上, 然后点击 执行 保存\n配置账户密码\n配置账户权限\n最后点击 执行 按钮, 跳转到新界面后, 会显示该新建账户在当前数据库权限, 也将 全选 勾上, 然后点击 执行 保存\n配置账户权限\n配置 WordPress修改 WordPress 目录权限\ncd /opt/lampp/htdocssudo chown -R wp:www-data wordpresssudo chmod -R 777 wordpress\n\n复制 wordpress 目录下 wp-config-sample.php 为 wp-config.php, 并修改配置\ncd wordpress/cp wp-config-sample.php wp-config.phpvi wp-config.php\n\n修改数据库连接配置\nwp-config.php/** WordPress数据库的名称 */define( &#x27;DB_NAME&#x27;, &#x27;clv_wp_db&#x27; );/** MySQL数据库用户名 */define( &#x27;DB_USER&#x27;, &#x27;test1&#x27; );/** MySQL数据库密码 */define( &#x27;DB_PASSWORD&#x27;, &#x27;12345678&#x27; );/** WordPress数据表前缀 */$table_prefix = &#x27;clv_&#x27;; # 自定义, 我自己用数据库名字前缀\n\n并在该文件最后添加\nwp-config.php+ /** wordpress 后台管理安装插件不需 ftp 登录  */+ define(&quot;FS_METHOD&quot;, &quot;direct&quot;);+ define(&quot;FS_CHMOD_DIR&quot;, 0777);+ define(&quot;FS_CHMOD_FILE&quot;, 0777);\n\n保存后直接访问你的域名 https://www.domain.com 即可初始化 WordPress\n强制 HTTPS 访问sudo vi /opt/lampp/htdocs/wordpress/.htaccess\n\n在 &lt;/IfModule&gt; 以外添加\n.htaccess&lt;/IfModule&gt; # END WordPress + # 强制 HTTPS 访问+ RewriteCond %&#123;SERVER_PORT&#125; !^443$+ RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]\n\n保存并重启 Apache 服务\nsudo /opt/lampp/lampp restartapache\n\n此时用 http://www.domain.com 会自动跳转到 https://www.domain.com\n美化 WordPress 搜索 url将搜索后的 url 从 https://www.domain.com/?s=搜索词 变为 https://www.domain.com/search/搜索词\n在主题函数模板 functions.php 最后添加即可\nfunctions.php//搜索美化伪静态function change_search_url_rewrite() &#123;    if ( is_search() &amp;&amp; ! empty( $_GET[&#x27;s&#x27;] ) ) &#123;        wp_redirect( home_url( &#x27;/search/&#x27; ) . urlencode( get_query_var( &#x27;s&#x27; ) ) );        exit();    &#125; elseif ( is_search() &amp;&amp; empty( get_query_var( &#x27;s&#x27; ) ) ) &#123;        wp_redirect( home_url( &#x27;/search&#x27; ) );        exit();    &#125;&#125;add_action( &#x27;template_redirect&#x27;, &#x27;change_search_url_rewrite&#x27; );\n","categories":["建站"],"tags":["ubuntu","xampp","wordpress","blog"]},{"title":"升级 Windows 10 v2004 和 wsl2","url":"/posts/upgrade-win10-v2004-wsl2/","content":"Windows 10 v2004 正式版发布, 同时更快更好的 wsl2 也来了\n\n\n升级 Windows 系统可以在 开始 → 设置 → 更新和安全 → Windows 更新 获取最新版系统, 但有时候会一直提示已经是最新版系统, 这时可以下载安装官方更新助手 易升\n升级成功后可以在 开始 → 设置 → 系统 → 关于 中看到系统版本号为 2004\n系统版本信息\n系统功能开放升级 wsl2 需要先启动 子系统功能 和 CPU 虚拟化\n开启子系统键盘 Windows + R 打开 运行, 输入 control 打开 控制版面 → 程序 → 程序和功能 → 启用或关闭 Windows 功能\n启用或关闭 Windows 功能\n如图将 适用于 Linux 的 Windows 子系统 打开点击确定, 并按照提示重启系统\n开启 BIOS CPU 虚拟化不同品牌主板的 BIOS 各不相同, 但一般位置是在 Security → Intel Virtual Technology 或中文的 高级 → Intel 虚拟化\n开启并重进系统后, 在 任务管理器 → 性能 → CPU 可以看到 虚拟化: 已启用\nCPU 性能信息\n升级 wsl2先下载 wsl2 更新包并安装: wsl2 更新包链接\n安装完后打开 PowerShell, 将安装的子系统从 wsl 迁移到 wsl2\n\n命令 wsl --set-version &#123;LinuxVersion&#125; &#123;WslVersion&#125;\nLinuxVersion 表示 Linux 子系统版本\nWslVersion 表示 wsl 的版本\n\nwsl --set-version Ubuntu-18.04 2\n\n将会看到\n正在进行转换, 这可能需要几分钟时间...有关与 WSL 2 的主要区别的信息, 请访问 https://aka.ms/wsl2转换完成\n\n然后将 wsl2 设置为默认\nwsl --set-default-version 2\n\n查看当前子系统和对应的 wsl 版本\nwsl -l -v\n\n将会看到\n  NAME            STATE           VERSION* Ubuntu-18.04    Stopped         2\n","categories":["系统"],"tags":["ubuntu","win10","windows 10","wsl","wsl2","子系统","subsystem"]},{"title":"Video Of You! 勒索诈骗邮件","url":"/posts/video-of-you-ransomware-email/","content":"前几天看邮箱, 清理一些垃圾邮件时, 看到一份好几天前就发给我的邮件, 位置在垃圾箱里, 标题写着 Video Of You! 看到这名字就觉得不对劲, 不像普通的垃圾广告邮件, 这引起了我的注意…\n\n\n诈骗勒索邮件该邮件内容如下:\n\nHey, some time ago your computer was infected with my private software, RAT (Remote Administration Tool).My software gave me access to all your accounts, contacts and it was possible to spy on you over your webcam.For example, I know that at the time of infection your password was: 我平时常用的密码Sometimes I was spying on you and then once I was shocked seeing you started to MASTRUBATE, so I recorded you with the software called: Bandicam, Google it if you want.I can share the video of you with all your friends, contacts, post it on social networks and everywhere else.You can stop me, send 450$ with the cryptocurrency Ethereum (ETH).It’s easy to buy Ethereum (ETH), for example here: btcdirect.eu , bitvavo.com , anycoindirect.eu , binance.com , or Google another exchanger.My Ethereum (ETH) wallet is: 0x869C893E84618DA936274bADF3d9E800d0572955Yes that’s how the wallet looks like, copy and paste it.After receiving the payment, I will remove everything and you never hear from me again.You got 3 days time!Next time update your browser before browsing the web, so you won’t get infected again!\n\n\n邮件内容大概意思是他黑了我的电脑, 可以拿到我所有的账户和联系人信息, 并通过网络摄像头监视我 （可我台式机没装摄像头啊哈哈哈哈哈!!! 😂）\n然后贴出了我平时常用的密码, 从这一点上他的确黑到了我账户, 然后说有时监视我时, 看到我 ✊🏻🐔 就用 Bandicam 录了下来, 并威胁我他可以将视频发给我的所有朋友和社交网络上任何地方, 吓得我打开了 P 站 😏\n重点来了, 只要我三天内用以太币 ETH 虚拟货币转给他 450 美元, 他就删除所有内容, 还提供了购买以太币的网址, 以及他的以太币钱包, 整片邮件言语之间都透露了一种 “我说的都是网上能查到的方式或工具在监视你” 的语气, 从而隐约的暗示这件事是真实的\n因为我没有摄像头, 所以这邮件很明显是在骗我, 不过问题是, 他是怎么知道我常用密码的?! 是通过什么方式黑到我账户的?! \n在网上查了下, 别人也有相同的经历, 邮件内容大同小异, 但都是用爆出你用的密码来让你相信你被黑并且被监控录了视频\n\n有网友说 前几年有几个大网站用户数据泄露并被人在暗网上出售\n\n名为 CosmicDark 的国外团队在暗网上公开出售的这份优酷用户资料, 售价 300 美元, 数据量超过 1 亿条, 其中包括邮箱、密码等关键数据。\n\n‘;–have i been pwned?\n这时候有个牛逼的网站出来了：‘;–have i been pwned?, 这个网站收录了这几年来被黑客窃取、公布在网络上的名单资料, 只要输入你的邮箱, 即可快速比对这些被窃取的资料里有没有你的个人资料。\n\npwned 是什么意思呢? 其实这是一个骇客用语, 由 owned 演化而来, 有「被攻破、入侵或是控制」的意思\n\n\n‘;–have i been pwned?\n\n进入 ‘;–have i been pwned? 主页可以看到, 目前有 456 个网站泄露数据, 有 9,765,110,880 个账户被黑, 所以黑客利用这一点撒大网群发邮件, 总有人会上勾\n\n‘;–have i been pwned?\n查查哪些网站泄露了\n我用我的邮箱查了下, 我在 9 个网站的账户被泄露了, 往下滚动可以看到具体哪些网站泄露了我的账户\n\n‘;–have i been pwned?\n使用工具翻译了下:\n\nAdobe:2013年10月, Adobe 的1.53亿个账户被入侵, 每个账户包含内部ID、用户名、电子邮件、加密密码和明文的密码提示。密码的加密方式非常差, 很多密码很快被破解回明文状态。未加密的密码提示也暴露了更多的密码信息, 使得数以百万计的 Adobe 用户面临更大的风险。泄露数据: 电子邮件地址、密码提示、密码、用户名。\n\nAipai.com (未经验证):2016年9月, 据称来自中国游戏网站 Aipai.com 的数据泄露, 包含650万个账户的信息被泄露。虽然有证据表明数据是合法的, 但由于很难完全验证这一中国数据泄露事件, 因而标记为“未经验证”。泄露的数据包括电子邮件地址和 MD5 密码哈希值。泄露数据: 电子邮件地址、密码。\n\nCollection #1 (未经验证):2019年1月, 一份庞大的凭证填充列表（包含电子邮件地址和密码, 用于在其他服务上进行账号劫持）被发现被分发到一个受欢迎的黑客论坛。数据包含超过27亿条记录, 包括7.73亿个唯一的电子邮件地址和密码, 这些密码曾被用于其他被泄露的服务中。泄露数据: 电子邮件地址、密码。\n\nDLH.net:2016年7月, 游戏新闻网站 DLH.net 发生数据泄露, 暴露了330万订阅者的身份信息。泄露包括用于在 Steam 平台上兑换和激活游戏的密钥, 暴露的信息包括电子邮件地址、出生日期和加盐的MD5密码哈希值。泄露数据: 出生日期、电子邮件地址、姓名、密码、用户名、网站活动。\n\nGravatar:2020年10月, 一名安全研究员发布了一项技术, 用于从 Gravatar 服务中抓取大量数据, Gravatar 是提供全球唯一头像的服务。1.67亿个姓名、用户名和用于引用用户头像的 MD5 哈希值的电子邮件地址被抓取, 并在黑客社区中广泛传播。1.14亿个MD5哈希值被破解并与源哈希一起传播, 泄露了原始电子邮件地址和相关数据。泄露数据: 电子邮件地址、姓名、用户名。\n\nJD:2013年（确切日期不明）, 中国电子商务服务 JD 发生数据泄露, 暴露了13GB数据, 其中包含7700万个唯一的电子邮件地址。数据还包括用户名、电话号码和作为 SHA-1 哈希值存储的密码。泄露数据: 电子邮件地址、密码、电话号码、用户名。\n\nNetEase (未经验证):2015年10月, 报告称中国网站 NetEase (163.com)发生数据泄露, 影响了数亿订阅者。虽然有证据表明数据是合法的（多个 HIBP 订阅者确认他们使用的数据中的密码）, 但由于难以完全验证这一中国数据泄露事件, 因而标记为“未经验证”。泄露的数据包括电子邮件地址和明文密码。泄露数据: 电子邮件地址、密码。\n\nTGBUS (未经验证):大约在2017年, 据称中国游戏网站 TGBUS 发生了一次数据泄露, 影响了超过1000万独特订阅者。虽然有证据表明数据是合法的, 但由于难以完全验证这一中国数据泄露事件, 因而标记为“未经验证”。泄露的数据包括用户名、电子邮件地址和加盐的 MD5 密码哈希值。泄露数据: 电子邮件地址、密码、用户名。\n\nYouku:2016年末, 在线视频服务 Youku 发生数据泄露。事件暴露了9200万个唯一用户账户及其对应的 MD5 密码哈希值。泄露数据: 电子邮件地址、密码。\n\n\n结论也就是说, 真正泄露 我账户的应该是 Adobe、DLH.net、Gravatar、JD 和 优酷 这几个网站, 所以大家最好定期修改密码且使用复杂一些的字符\n","categories":["日常"],"tags":["ransomware","scam","勒索","诈骗","邮件"]},{"title":"Windows 10 子系统安装 Erlang OTP 19","url":"/posts/win10-wsl-erlang/","content":"在 Windows 10 子系统安装 Erlang OTP 19\n\n\n环境\n系统: Windows 10 pro ×64\n子系统: wsl2 Ubuntu 18.04\n\n添加镜像sudo vi /etc/apt/sources.list\n最后添加清华 erlang-solutions 源\nsources.list+ # qing hua erlang-solutions+ deb https://mirrors.tuna.tsinghua.edu.cn/erlang-solutions/ubuntu/ bionic contrib\n\n更新sudo apt update\n\n若失败提示 The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY XXXXXXXXXXXX 则复制最后的 KEY, 执行\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys XXXXXXXXXXXX\n\n若提示如下错误: \ngpg: keyserver receive failed: Server indicated a failure\n\n则执行\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv XXXXXXXXXXXX\n\n将会看到:\nExecuting: /tmp/apt-key-gpghome.VehtZ71sTw/gpg.1.sh --keyserver hkp://keyserver.ubuntu.com:80 --recv XXXXXXXXXXXXgpg: key D208507CA14F4FCA: public key &quot;Erlang Solutions Ltd. &lt;packages@erlang-solutions.com&gt;&quot; importedgpg: Total number processed: 1gpg:               imported: 1\n\n然后再次执行 sudo apt update 即可\n安装 Erlang可以选择安装特定版本, 也可以直接安装, 会自动安装最新版\n安装特定版本比如选择 OTP 19 安装\nsudo apt install esl-erlang=1:19.*\n\n提示安装成功后, 测试\nerlErlang/OTP 19 [erts-8.3.5.7] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]Ebash V8.3.5.7  (abort with ^G)1&gt;\n\n安装完成后记得把镜像地址注释掉, 否则下次更新系统会不小心升级版本\n安装最新版sudo apt install esl-erlang\n\nOTP 20 以上自带支持 history, 方便在 shell 运行时记录执行过的命令, 添加环境变量\nsudo vi ~/.bashrc\n\n.bashrc+ export ERL_AFLAGS=&quot;-kernel shell_history enabled&quot;\n\n开启新终端 或 source 下 .bashrc\nsource ~/.bashrc\n","categories":["应用"],"tags":["ubuntu","erlang","app","application","应用","win10","wsl"]},{"title":"WordPress 自动为文章添加关键字和描述","url":"/posts/wordpress-auto-keywords-desc/","content":"优化网站 SEO, 自动将文章标签转化为关键字, 为文章添加 keywords 和 description\n\n\n打开主题的 functions.php 添加以下代码:\nfunctions.php&lt;?php// tag 转 keywordfunction tag_to_keywords() &#123;    if ( is_single() ) &#123;    // 文章页面        $posttags = get_the_tags();        if ( $posttags ) &#123;            foreach ( $posttags as $tag ) &#123;                $keywords [] = strtolower( $tag-&gt;name );            &#125;;            array_push( $keywords, &quot;gelomen&quot;, &quot;code cola&quot;, &quot;code&quot;, &quot;cola&quot; );?&gt;&lt;!-- html --&gt;&lt;!-- 网站关键字, 用英文逗号隔开 --&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;?php echo implode( &quot;,&quot;, array_unique( $keywords ) ); ?&gt;&quot;/&gt;&lt;!-- 网站的描述 --&gt;&lt;meta name=&quot;description&quot; content=&quot;Gelomen 的个人博客网站。&quot;/&gt;&lt;?php        &#125;    &#125; else &#123;    // 其他页面?&gt;&lt;!-- html --&gt;&lt;!-- 网站关键字, 用英文逗号隔开 --&gt;&lt;meta name=&quot;keywords&quot; content=&quot;gelomen,code cola&quot;/&gt;&lt;!-- 网站的描述 --&gt;&lt;meta name=&quot;description&quot; content=&quot;Gelomen 的个人博客网站。&quot;/&gt;&lt;?php    &#125;&#125;add_action(&#x27;wp_head&#x27;, &#x27;tag_to_keywords&#x27;);\n","categories":["优化"],"tags":["optimize","优化","wordpress","meta","keywords","description","tag"]},{"title":"WordPress 加载自定义 CSS","url":"/posts/wordpress-custom-css/","content":"优化 WordPress 或者编写了前端代码需要优化样式时, 可以使用主题自带的 自定义 -&gt; 额外CSS 添加样式, 但若需要添加的样式特别多时且针对某一个功能, 则最好是写在一个 css 样式文件里, 这时就可以使用 wp_enqueue_style/5 加载\n\n\n函数语法参数函数总共 5 个参数: wp_enqueue_style($handle, $src, $deps, $ver, $media);\n\n$handle: (字符串, 必需)脚本名称, 小写字符串;\n$src: (字符串, 必需)WordPress 目录下的 css 路径, 如：”&#x2F;wp-content&#x2F;uploads&#x2F;css&#x2F;xxx.css”, 你也可以使用函数, 如 get_template_directory_uri() 来获取主题目录中的样式文件;\n$deps: (数组, 可选)依赖关系数组, 加载该样式前需要加载的其它样式, 默认值： array();\n$ver: (字符串或布尔, 可选)指明脚本版本号的字符串, 默认为 false;\n$media: (字符串, 可选)是指 CSS 的媒体类型, 比如 screen 或 handheld 或 print, 如果你不知道是否需要使用这个, 那就不使用它, 默认值为 all\n\n用法我有个模拟 shell 的打字动画, 编写以下代码并保存为 simulate_shell.css\nsimulate_shell.css#header_shell &#123;    text-transform: none;&#125;#ps1, #my_curcor &#123;    float: left;    color: #00b2d7;    white-space: pre;&#125;#my_curcor &#123;    width: 0;&#125;#my_shell &#123;    float: left;    color: #ffbd2f;&#125;\n\n然后上传该 css 文件到 “&#x2F;wp-content&#x2F;uploads&#x2F;css” 目录下, 再到当前主题的 functions.php 下添加引用\nfunctions.php// 加载自定义cssfunction my_css_fun() &#123;    wp_enqueue_style(&#x27;simulate_shell&#x27;, &#x27;/wp-content/uploads/css/simulate_shell.css&#x27;, array(), &#x27;1.0&#x27;);&#125;add_action(&#x27;wp_head&#x27;, &#x27;my_css_fun&#x27;);\n\n最后保存并刷新页面, 就可以看到效果了, 在页面的源码里可以看到该 css 文件被引用了\n","categories":["优化"],"tags":["optimize","优化","wordpress","php","css"]},{"title":"WordPress 加载自定义 JavaScript","url":"/posts/wordpress-custom-js/","content":"优化 WordPress, 实现前端一些功能时需要用到 JavaScript, 可以用 wp_enqueue_script/5 函数加载\n\n\n函数语法参数函数总共 5 个参数: wp_enqueue_script($handle, $src, $deps, $ver, $in_footer);\n\n\n\n参数\n类型\n必须\n说明\n\n\n\n$handle\n字符串\n是\n脚本名称\n\n\n$src\n字符串\n否\n默认值：None, WordPress 目录下的 JavaScript 路径, 如：/wp-content/uploads/js/xxx.js\n\n\n$deps\n数组\n否\n默认值: array(), 依赖关系数组, 加载该脚本前需要加载的其它脚本\n\n\n$ver\n字符串\n否\n默认为 false, 指明脚本版本号的字符串\n\n\n$in_footer\n布尔\n否\n默认值: false, 引用会放置在区块中, 为 true 时, 引用会放置在最下方\n\n\n用法我的首页顶部有个模拟 shell 的打字动画, 编写以下代码并保存为 simulate_shell.js\nsimulate_shell.js// 参数var def_header_shell_text = &#x27;$&gt; _&#x27;;var shell_code_str = &#x27;echo &quot;Code / Cola Forever !&quot;&#x27;;var tap_speed = 80;var header_shell_innerHTML = &#x27;&lt;div id=&quot;header_shell&quot;&gt;&lt;div id=&quot;ps1&quot;&gt;$&gt; &lt;/div&gt;&lt;div id=&quot;my_shell&quot;&gt;&lt;/div&gt;&lt;div id=&quot;my_curcor&quot;&gt;_&lt;/div&gt;&lt;/div&gt;&#x27;;// 检测是否播放动画$(function () &#123;    var def_header_shell = document.evaluate(&#x27;//*[@id=&quot;wrapper-inner&quot;]/div[2]/div/h2&#x27;, document).iterateNext();    if (def_header_shell.innerText == def_header_shell_text) &#123;        def_header_shell.innerHTML = header_shell_innerHTML;        var intervalId = setInterval(&#x27;shell_curcor()&#x27;, 500);        setTimeout(tap_code, 3000, intervalId);    &#125;&#125;);// 光标function shell_curcor() &#123;    curcor = document.getElementById(&quot;my_curcor&quot;);    if (curcor.innerHTML == &#x27;_&#x27;) &#123;        curcor.innerHTML = &#x27;&#x27;    &#125; else if (curcor.innerHTML == &#x27;&#x27;) &#123;        curcor.innerHTML = &#x27;_&#x27;    &#125;&#125;// 敲代码动画function tap_code(intervalId) &#123;    clearInterval(intervalId)    document.getElementById(&quot;my_curcor&quot;).innerHTML = &#x27;_&#x27;;    var my_shell_code = document.getElementById(&quot;my_shell&quot;).innerText;    var my_shell_code_array = shell_code_str.split(&quot;&quot;);    for (var i = 0; i &lt; my_shell_code_array.length; i++) &#123;        my_shell_code += my_shell_code_array[i];        setTimeout(tap_code_do, i * tap_speed, my_shell_code);    &#125;    setTimeout(setInterval, my_shell_code_array.length * tap_speed + 500, &#x27;shell_curcor()&#x27;, 500)&#125;function tap_code_do(my_shell_code) &#123;    document.getElementById(&quot;my_shell&quot;).innerText = my_shell_code;&#125;\n\n然后上传该 js 文件到 /wp-content/uploads/js 目录下, 再到当前主题的 functions.php 下添加引用, 将 js 放在 footer否则该动画不生效\nfunctions.php// 加载自定义jsfunction my_js_fun() &#123;\twp_enqueue_script(&#x27;simulate_shell&#x27;, &#x27;/wp-content/uploads/js/simulate_shell.js&#x27;, array(), &#x27;1.0&#x27;, true);&#125;add_action(&#x27;wp_footer&#x27;, &#x27;my_js_fun&#x27;);\n\n最后保存并刷新页面, 就可以看到效果了, 在页面的源码里可以看到该 js 文件被引用了\n","categories":["优化"],"tags":["optimize","优化","wordpress","php","javascript","js"]},{"title":"使用 WordPress 子主题自定义功能","url":"/posts/wordpress-sub-themes/","content":"正常情况下如果你想添加自定义的功能, 并且不使用插件的情况下, 那首选就是在当前主题下的 functions.php 里面添加自定义代码. 但问题是, 如果主题有更新时, 这里面的代码会被覆盖, 从而丢失了你的自定义功能. 这时候子主题的优势就来了, 它可以让你无需修改任何父主题代码却也能达到自定义功能目的~\n\n\n子主题目录首先进入你的 WordPress 下 “wp-content&#x2F;themes” 目录, 创建与当前主题相同名字的目录, 目录名字结尾加上 “-child”, 比如我的父主题目录是 “slanted”, 则创建目录 “slanted-child”\ncd /opt/lampp/htdocs/wordpress/wp-content/themessudo mkdir slanted-child\n\n修改权限, 并进入目录\nsudo chown -R your_user:www-data slanted-child/sudo chmod -R 777 slanted-child/cd slanted-child/\n\n子主题配置子主题至少要包含一个 style.css 文件才能生效, 创建该文件\nvi style.css\n\n并写入以下内容\nstyle.css/*Theme Name:     SomeTheme ChildTheme URI:      http: //example.com/Description:    Child theme for the SomeTheme themeAuthor:         Your name hereAuthor URI:     http: //example.com/about/Template:       SomeThemeVersion:        0.1.0*/\n\n各参数意义:\n\n\n\n参数\n必须\n说明\n\n\n\nTheme Name\n是\n子主题的自定义名称, 但通常是 父主题名字 + Child\n\n\nTheme URI\n否\n子主题的主页\n\n\nDescription\n否\n子主题的描述, 比如: 我是 xxx 的子主题\n\n\nAuthor URI\n否\n作者主页\n\n\nAuthor\n否\n作者的名字\n\n\nTemplate\n是\n父主题的目录名, 区别大小写\n\n\nVersion\n否\n子主题的版本, 比如: 0.1, 1.0 等\n\n\n一般子主题是自用的, 所以我的子主题只挑了以下几个:\n/*Theme Name: Slanted ChildDescription: Slanted 的子主题Author: GelomenTemplate: slanted*/\n\n引入父主题样式在 style.css 下使用 @import 引入父主题样式, 这样子主题就可以拥有父主题的样式了\n/*Theme Name: Slanted ChildDescription: Slanted 的子主题Author: GelomenTemplate: slanted*/@import url(&quot;../slanted/style.css&quot;);\n\n此时回到你的网站后台主题页面就可以看到你的主题选项, 启用后就可以看到你的网站跟父主题是一样的\n其它配置文件子主题目录下可以拥有以下文件类型:\n\nstyle.css (必需)\nfunctions.php (可选)\n模板文件 (可选)\n其他文件 (可选)\n\nfunctions.php这个文件默认内容为:\nfunctions.php&lt;?php ?&gt;\n\n将你原本放在父主题的自定义代码迁移到这里, 父主题更新时就不怕丢失了, 比如我的 美化搜索 URL 和引入自定义 CSS、JavaScript 文件代码, 这里可以直接在后台的主题编辑器里修改内容\nfunctions.php&lt;?php //搜索美化伪静态function change_search_url_rewrite() &#123;    if ( is_search() &amp;&amp; ! empty( $_GET[&#x27;s&#x27;] ) ) &#123;        wp_redirect( home_url( &#x27;/search/&#x27; ) . urlencode( get_query_var( &#x27;s&#x27; ) ) );        exit();    &#125; elseif ( is_search() &amp;&amp; empty( get_query_var( &#x27;s&#x27; ) ) ) &#123;        wp_redirect( home_url( &#x27;/search&#x27; ) );        exit();    &#125;&#125;add_action(&#x27;template_redirect&#x27;, &#x27;change_search_url_rewrite&#x27;); // 加载自定义jsfunction my_js_fun() &#123;\twp_enqueue_script(&#x27;simulate_shell&#x27;, &#x27;/wp-content/uploads/js/simulate_shell.js&#x27;, array(), &#x27;1.5&#x27;, true);&#125;add_action(&#x27;wp_footer&#x27;, &#x27;my_js_fun&#x27;); // 加载自定义cssfunction my_css_fun() &#123;\twp_enqueue_style(&#x27;simulate_shell&#x27;, &#x27;/wp-content/uploads/css/simulate_shell.css&#x27;, array(), &#x27;1.0&#x27;);&#125;add_action(&#x27;wp_head&#x27;, &#x27;my_css_fun&#x27;); ?&gt;\n\n模板文件模板文件在子主题中可以覆盖任何父主题模板中的文件, 只需要创建同名文件就行\n子主题使用模板文件的例子:\n\n增加父主题没有的模板, 可以在编辑页面下选择\n替换比父主题更个性化的模板, 重写 index.php 或 home.php\n\n其他文件子主题目录还可以放置其它用于主题的文件, 比如自定义样式的 CSS 文件 和 实现前端功能的 JavaScript 文件, 以及让子主题显示预览的 screenshot.png 文件\nCSS 和 JavaScript我之前在首页增加的模拟 Shell 的 CSS 和 JavaScript 文件就可以移动当前的子主题目录下\nmv -f ../../uploads/css/ ./mv -f ../../uploads/js/ ./\n\n然后修改 functions.php 里引用的路径\nfunctions.php......wp_enqueue_script(&#x27;simulate_shell&#x27;, &#x27;/wp-content/themes/slanted-child/js/simulate_shell.js&#x27;, array(), &#x27;1.5&#x27;, true);......wp_enqueue_style(&#x27;simulate_shell&#x27;, &#x27;/wp-content/themes/slanted-child/css/simulate_shell.css&#x27;, array(), &#x27;1.0&#x27;);......\n\n子主题在后台主题管理页面, 我们当前的子主题没有预览图, 我们可以自行将我们的主页截图, 命名为 screenshot.png, 并存放在子主题目录下, 然后刷新后台主题管理页面即可看到子主题有预览图了\n","categories":["优化"],"tags":["optimize","优化","wordpress","themes","主题"]},{"title":"设置 WordPress 上传附件的类型","url":"/posts/wordpress-upload-mime-types/","content":"解锁 WordPress 上传文件的类型限制\n\n\n默认的 WordPress 会对多媒体上传的附件类型进行限制, 可通过两种方式设置解决\n配置  functions.php进入 主题编辑器 – 选择当前主题 –  functions.php, 在里面添加以下代码\nfunctions.php// 自定义附件类型function custom_upload_mimes($existing_mimes = array()) &#123;    // 添加支持上传的文件类型    $existing_mimes[&#x27;zip&#x27;] = &#x27;application/zip&#x27;;    $existing_mimes[&#x27;rar&#x27;] = &#x27;application/x-rar&#x27;;    $existing_mimes[&#x27;exe&#x27;] = &#x27;application/octet-stream&#x27;;    return $existing_mimes; &#125;add_filter(&#x27;upload_mimes&#x27;, &#x27;custom_upload_mimes&#x27;);\n\n保存并刷新页面即可上传对应配置类型的附件, 其它类型的文件可自行搜索 MIME-TYPE 查找\n配置 wp-config.php进入服务器后台、或者宝塔面板进入 WordPress 根目录, 编辑 wp-config.php, 在最后加入配置\nwp-config.php/** 允许上传任意类型附件 */define(&#x27;ALLOW_UNFILTERED_UPLOADS&#x27;, true);\n\n保持并清理 WordPress 缓存, 刷新多媒体页面即可上传任意类型的附件\n","categories":["建站"],"tags":["wordpress","upload","上传","MIME"]},{"title":"解决 WP Super Cache 安装后无法使用","url":"/posts/wp-super-cache-not-working/","content":"修改配置修复 WP Super Cache 插件安装后无法使用问题\n\n\n获取 wp-content 读写权限sudo chmod 777 /var/www/html/wordpress/wp-content/\n\n检查 cache 文件进入 wp-content 目录\ncd /var/www/html/wordpress/wp-content\n\n检查 wp-cache-config.php 是否存在, 若不存在则:\ncp plugins/wp-super-cache/wp-cache-config-sample.php ./wp-cache-config.php\n\n检查 advanced-cache.php 是否存在, 若不存在则:\ncp plugins/wp-super-cache/advanced-cache.php ./\n并将这两个文件都开启可写入权限\nsudo chmod 777 wp-cache-config.php advanced-cache.php\n\n添加配置回到 wordpress 根目录, 在 wp-config.php 中 ABSPATH 之前添加两行\nwp-config.php+ define(&#x27;WP_CACHE&#x27;, true);+ define(&#x27;WPCACHEHOME&#x27;,&#x27;/var/www/html/wordpress/wp-content/plugins/wp-super-cache/&#x27;);/** 设置WordPress变量和包含文件 */require_once( ABSPATH . &#x27;wp-settings.php&#x27; );\n\n刷新 WordPress 插件页面应该就不会报错了, 但会在 WP Super Cache 设置页面顶部提示 /var/www/html/wordpress/wp-content 权限问题, 此时先不要修改权限, 先 启用缓存功能\n缓存功能\n保存更新后再执行\nsudo chmod 755 /var/www/html/wordpress/wp-content/\n","categories":["插件"],"tags":["wordpress","cache","plugin"]},{"title":"使用 WP Mail SMTP 发邮件给网站管理员","url":"/posts/wordpress-wp-mail-smtp-plugin/","content":"使用 WP Mail SMTP 插件, 在前端输入内容发送邮件到网站管理员邮箱\n\n\n前段时间客户提需求, 需要在前端做个寻求合作的输入框, 商户输入内容后以发邮件的方式将网店地址发送给管理员邮箱, 再从邮箱里审核链接, 从而避开因公开联系方式而导致经常收到垃圾电话或微信的烦恼\n安装 WP Mail SMTP 插件WordPress 默认是使用 PHP 的 mail() 功能发送邮件, 但需要主机开启这一功能否则无法使用, 使用网上其他大佬的方法, 调用 mail() 发送都没有正常收到邮件, 并且即使是以这种方式发送成功, 邮件也很可能被当做垃圾邮件\n解决这个问题就是安装 WP Mail SMTP 插件, 根据这个插件的描述:\n\nWP Mail SMTP 通过重新配置 WordPress 在发送电子邮件时使用适当的 SMTP 程序来修复您的电子邮件可传递性, 正确的 SMTP 配置通过身份验证有助于提高电子邮件的可传递性, 通过改进和更改 WordPress 网站发送电子邮件方式, 轻松解决电子邮件传递问题。我们重新配置函数以使用正确的 SMTP 主机凭据或利用内置的 SMTP 邮件提供程序。使用我们的内置 SMTP 邮件提供商集成（推荐）之一时, 使用提供商的直接 API 发送电子邮件。这意味着即使您的 Web 主机阻止 SMTP 端口, 您的电子邮件仍会成功发送。\nWP Mail SMTP by WPForms\n\n直接在插件安装节目搜索 WP Mail SMTP 安装并启用\n配置 WP Mail SMTP插件基础配置进入 WP Mail SMTP 配置界面 一般 标签页, 进行以下配置\n\n发件人: 输入要用于发送邮件的地址, 支持自己发送给自己, 所以这里我配置了要接受邮件的邮箱\n发件人名词: 输入发件人名称即可\n邮件程序: 默认给出了 10 个选项, 因为使用的是 163 邮箱, 选项里没有, 所以选择最后的 其他 SMTP\n\n邮件设置这时候需要登录到你的邮箱, 进入邮箱设置, 这里以 163 邮箱为例: \n\n进入设置\n点击左侧菜单的 POP3/SMTP/IMAP\n开启 IMAP/SMTP 服务\n授权密码管理, 点击 新增授权密码 按钮, 会在小窗口自动生成密码, 记住保留这个密码, 因为小窗口关闭后不会再显示, 只能再次生成\n复制最下方提示的 SMTP 服务器: smtp.163.com\n可以看到最下方显示: POP3/SMTP/IMAP 服务全部支持 SSL 连接\n\n插件 SMTP 配置这时候需要回到插件设置界面 一般 标签页下方\n\nSMTP 主机: 输入 邮件设置 第 5 点的 smtp.163.com\n加密: 因为 163 邮箱支持 SSL 连接, 所以选择 SSL\nSMTP 端口: 163 邮箱设置里并没有看到端口, 不过可以通过搜索引擎找到, 输入 465\n自动 TLS: 启用\n认证: 启用\nSMTP 用户名: 输入邮箱地址\nSMTP 密码: 输入 邮件设置 第 4 点的密码\n\n最后保存设置, 并点击设置界面顶部的 电邮测试 按钮进入测试页面, 点击 发送电子邮件 按钮即可测试是否配置成功, 若成功则可以在邮箱收到一封 WP Mail SMTP 的测试邮件\n自定义发送内容这里只提供大概思路并不会展示全部代码, 使用时以实际情况自行进行修改和补全\n编写 JavaScript 获取输入在前端要发送内容的输入框里, 调用 JavaScript 函数, 使用 Ajax 异步方式发送: \n// 指定处理发送邮件的 php 文件var send_store_url_email_php = &quot;/wp-content/themes/someonetheme/send_store_url_eamil.php&quot;; // 校验 urlfunction isValidURL(url)&#123;    var urlRegExp=/^((https|http)?:\\/\\/)+[A-Za-z0-9]+.[A-Za-z0-9]+[\\/=\\?%-&amp;_~`@[]\\&#x27;:+!]([^&lt;&gt;\\&quot;\\&quot;])$/;    if(urlRegExp.test(url))&#123;        return true;    &#125;else&#123;        return false;    &#125;&#125; // Ajax 发送邮件function send_store_url() &#123;    var store_url = document.getElementById(&quot;store_url&quot;).value;    var xmlhttp = new XMLHttpRequest();    var popup_advance_send_result = document.getElementsByClassName(&quot;popup_advance_send_result&quot;)[0];    if(isValidURL(store_url)) &#123;       xmlhttp.open(&quot;POST&quot;, send_store_url_email_php, true);       xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);       xmlhttp.send(&quot;store_url=&quot; + store_url);       popup_advance_send_result.innerText = &quot;发送成功！&quot;;    &#125; else &#123;       popup_advance_send_result.innerText = &quot;网址格式不正确！&quot;;    &#125;&#125;\n\n处理邮件发送在主题根目录下创建文件: send_store_url_eamil.php, 并编辑: \nsend_store_url_eamil.php&lt;?php    require_once(&quot;../../../wp-load.php&quot;);    $store_url = $_POST[&quot;store_url&quot;];    $to = &quot;xxxx@163.com&quot;;    $subject = &quot;您有一条新消息！&quot;;    $img_url = &quot;https://xxx.com/logo.png&quot;;    $warming_text = &quot;请注意域名地址, 小心病毒链接:&quot;;    $body = &#x27;这里输入邮件要显示的内容, 支持 HTML 代码&#x27;;    $headers = array(&quot;Content-Type: text/html; charset=UTF-8&quot;);    $attachments = array();    wp_mail( $to, $subject, $body, $headers, $attachments );\n\n完成此时在输入框发送即可在邮箱查看新邮件\n","categories":["插件"],"tags":["wordpress","php","邮件","javascript","js","plugin","webmail","插件","mail"]},{"title":"WSL Ubuntu 22.04 安装 Erlang 25 和 Rebar3","url":"/posts/wsl-ubuntu-2204-erlang25-rebar3/","content":"WSL Ubuntu 22.04 安装 Erlang 25 和 Rebar3\n\n\nWSL使用 WSL Ubuntu 22.04.3 LTS, 相关文档 Microsoft WSL 旧版本手动安装步骤\n下载地址: Ubuntu 22.04 LTS 点击直接下载, 或复制链接到迅雷下载(无需登录和会员)速度更快些\n安装使用 管理员权限 方式打开 Powershell, 并进入下载的安装包所在目录, 如默认的 Downloads 目录, 安装 Ubuntu 22.04.3 LTS\ncd C:\\Users\\你的用户名\\Downloads\\Add-AppxPackage .\\wslubuntu2204之类的名字\n\n初始化安装完后在开始菜单点击 Ubuntu 图标, 初始化 Ubuntu 22.04 LTS 并根据提示创建用户名和密码\nErlang使用版本 Erlang OTP 25.3.2.8 Github 地址\nUbuntu (WSL)下载复制下方 Assets 的 otp_src_25.3.2.8.tar.gz 链接, 打开 Ubuntu 22.04 LTS 窗口粘贴下载\nwget https://github.com/erlang/otp/releases/download/OTP-25.3.2.8/otp_src_25.3.2.8.tar.gz\n\n解压并进入该目录\ntar zxf otp_src_25.3.2.8.tar.gzcd otp_src_25.3.2.8/\n\n安装先更新升级下系统的包\nsudo apt updatesudo apt upgrade\n\n安装组件, 之后 ./configuire 过程若提示失败, 根据提示缺少的组件安装再重试, 一般只需要安装以下组件\nsudo apt install build-essential libncurses5-dev openssl libssl-dev\n\n--with-ssl 指定要安装 ssl 相关模块, 一定要加上--prefix=/usr/local/erlang 指定安装目录, 可不加 或 自定义安装路径\n./configure --with-ssl --prefix=/usr/local/erlang\n\n\n注意: ./configure 后, 记得查看打印的 APPLICATIONS DISABLED 是否如下所示, 里面不包括 crypto 或 ssl 相关 APPLICATION\n\n*******************************************************************************************  APPLICATIONS DISABLED  *******************************************************************************************jinterface     : No Java compiler foundodbc           : ODBC library - link check failed\n\n继续安装\nmakesudo make install\n\n环境变量修改 /etc/profile\nsudo vi /etc/profile\n\n设置 erlang 环境变量, ERL_PATH 是前面指定的安装路径, 若没指定则用 whereis erlang 查看默认安装目录:\nprofileERL_PATH=/usr/local/erlang/binPATH=$ERL_PATH:$PATH\n\n修改 ~/.bashrc\nvi ~/.bashrc\n\n设置保存 erlang shell 执行过的命令历史记录\n.bashrcexport ERL_AFLAGS=&quot;-kernel shell_history enabled&quot;\n\n保存后执行命令让环境变量生效\nsource /etc/profilesource ~/.bashrc\n\n或\n直接重新打开 WSL 窗口即可\nWindows选择下方 Assets 的 otp_win64_25.3.2.8.exe 下载安装即可, 无需配置环境变量, 因为在 Windows 安装只为 IDE 能识别到 Erlang OTP 25\nRebar3使用版本 Rebar3 3.22.1 Github 地址\n下载复制下方 Assets 的 rebar3 链接, 打开 Ubuntu 22.04 LTS 窗口粘贴下载\nwget https://github.com/erlang/rebar3/releases/download/3.22.1/rebar3\n\n安装chmod u+x ./rebar3./rebar3 local install\n\n环境变量修改 ~/.bashrc\nvi ~/.bashrc\n\n加入配置\n.bashrcexport PATH=~/.cache/rebar3/bin:$PATH\n\n保存后执行命令让环境变量生效\nsource ~/.bashrc\n\n或\n直接重新打开 WSL 窗口即可\n","categories":["应用"],"tags":["ubuntu","rebar3","erlang","app","application","应用"]},{"title":"WSL 下 Ubuntu 20.04 中文设置","url":"/posts/wsl-ubuntu-chinese-language/","content":"给 wsl 下的 Ubuntu 20.04 设置中文\n\n\n环境\n系统: Windows 10 Pro ×64\n子系统: Ubuntu 20.04 LTS\n\n安装语言包sudo apt install language-pack-zh-hans\n\n设置 localesudo vi /etc/locale.gen\n\n找到 zh_CN.UTF-8 UTF-8 并取消注释, 然后保存并退出\n...diff locale.gen# zh_CN.GBK GBK- #zh_CN.UTF-8 UTF-8+ zh_CN.UTF-8 UTF-8# zh_HK BIG5-HKSCS...\n\n编译语言sudo locale-genGenerating locales (this might take a while)...  en_US.UTF-8... done  zh_CN.UTF-8... done  zh_SG.UTF-8... doneGeneration complete.\n\n设置默认语言为中文sudo vi /etc/default/locale\n将内容修改为\n- LANG=en_US.UTF-8+ LANG=zh_CN.UTF-8\n\n最后开启新的终端即可生效\nsudo apt update[sudo] gelomen 的密码：命中:1 http://mirrors.aliyun.com/ubuntu focal InRelease命中:2 http://mirrors.aliyun.com/ubuntu focal-security InRelease命中:3 http://mirrors.aliyun.com/ubuntu focal-updates InRelease命中:4 http://mirrors.aliyun.com/ubuntu focal-proposed InRelease命中:5 http://mirrors.aliyun.com/ubuntu focal-backports InRelease正在读取软件包列表... 完成正在分析软件包的依赖关系树正在读取状态信息... 完成所有软件包均为最新。\n","categories":["优化"],"tags":["ubuntu","optimize","优化","wsl","chinese","中文"]},{"title":"WSL2 使用系统代理","url":"/posts/wsl2-system-proxy/","content":"添加脚本设置 wsl2 使用 Windows 的系统代理\n\n\n添加代理脚本启动 wsl 后, 直接在 ~ 目录下创建 proxy.sh 脚本, 自行修改端口\n\n这个脚本参考了文章 《WSL2中设置脚本以便捷开启命令行代理加速》 - 作者: wadaxiyang\n\n根据实际情况, 自行修改 socks_port 和 http_port 两个端口地址\nproxy.sh#!/bin/bashhostip=$(ipconfig.exe | grep -a -A 7 &quot;Windows IP&quot; | grep -a IPv4 | awk -F &#x27; . . . . . . . . . . . . : &#x27; &#x27;&#123;print $2&#125;&#x27; | tr -d &#x27;\\r&#x27;)wslip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)socks_port=socks端口(代理工具的socks端口)http_port=http端口(代理工具的http端口)PROXY_HTTP=&quot;http://$&#123;hostip&#125;:$&#123;http_port&#125;&quot;PROXY_SOCKS5=&quot;socks5://$&#123;hostip&#125;:$&#123;socks_port&#125;&quot;set_proxy()&#123;  export http_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;  export HTTP_PROXY=&quot;$&#123;PROXY_HTTP&#125;&quot;  export https_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;  export HTTPS_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;  export ALL_PROXY=&quot;$&#123;PROXY_SOCKS5&#125;&quot;  export all_proxy=$&#123;PROXY_SOCKS5&#125;  git config --global http.https://github.com.proxy $&#123;PROXY_HTTP&#125;  git config --global https.https://github.com.proxy $&#123;PROXY_HTTP&#125;  echo &quot;Proxy has been opened.&quot;&#125;unset_proxy()&#123;  unset http_proxy  unset HTTP_PROXY  unset https_proxy  unset HTTPS_PROXY  unset ALL_PROXY  unset all_proxy  git config --global --unset http.https://github.com.proxy  git config --global --unset https.https://github.com.proxy  echo &quot;Proxy has been closed.&quot;&#125;test_setting()&#123;  echo &quot;Host IP:&quot; $&#123;hostip&#125;  echo &quot;WSL IP:&quot; $&#123;wslip&#125;  echo &quot;PROXY HTTP:&quot; $&#123;PROXY_HTTP&#125;  echo &quot;PROXY SOCKS5:&quot; $&#123;PROXY_SOCKS5&#125;  echo &quot;Try to connect to Google...&quot;  resp=$(curl -I -s --connect-timeout 5 -m 5 -w &quot;%&#123;http_code&#125;&quot; -o /dev/null www.google.com)  if [ $&#123;resp&#125; = 200 ]; then    echo &quot;Proxy setup succeeded!&quot;  else    echo &quot;Proxy setup failed!&quot;  fi&#125;if [ &quot;$1&quot; = &quot;set&quot; ]then  set_proxyelif [ &quot;$1&quot; = &quot;unset&quot; ]then  unset_proxyelif [ &quot;$1&quot; = &quot;test&quot; ]then  test_settingelse  echo &quot;Unsupported arguments.&quot;fi\n\n修改 .bashrc在 wsl 里打开 ~/.bashrc, 在里面添加 alias 命令并保存\n.bashrcalias proxy=&quot;source ~/proxy.sh&quot;\n\n使用先 source 一下 ~/.bashrc 或 打开新的 wsl 窗口\nproxy set      # 开启代理proxy unset    # 关闭代理proxy test     # 测试代理\n\n效果\ngelomen in ~ proxy test\t\t\t\t# 刚打开 `wsl`, 测试: 失败Host IP: 192.168.2.120WSL IP: 192.168.2.108Try to connect to Google...Proxy setup failed!gelomen in ~gelomen in ~ proxy set\t\t\t\t# 打开代理Proxy has been opened.gelomen in ~gelomen in ~ proxy test\t\t\t\t# 再次测试: 成功Host IP: 192.168.2.120WSL IP: 192.168.2.108Try to connect to Google...Proxy setup succeeded!gelomen in ~gelomen in ~ proxy unset\t\t\t# 关闭代理Proxy has been closed.gelomen in ~gelomen in ~ proxy test\t\t\t\t# 再次测试: 失败Host IP: 192.168.2.120WSL IP: 192.168.2.108Try to connect to Google...Proxy setup failed!\n\n","categories":["系统"],"tags":["wsl","wsl2","子系统","代理","proxy"]},{"title":"使用 XAMPP 和 Filezilla 搭建静态资源和 FTP 服务","url":"/posts/xampp-statistics-ftp-server/","content":"搭建静态资源和 FTP 服务, 便于管理网站的静态资源文件\n\n\n环境\n系统: Ubuntu 20.04 TLS\n服务: Apache2\n工具: Filezilla\n\n安装需要先安装 XAMPP, 即 Apache + MySQL + PHP + PERL, 它是一个功能强大的建站集成软件包, 这个软件包原来的名字是 LAMPP, 但是为了避免误解, 现已改名为 XAMPP 了下载地址: XAMPP 官网 选择 Linux 版本\nsudo chmod +x xampp-linux-x64-7.4.8-0-installer.run*sudo ./xampp-linux-x64-7.4.8-0-installer.run*\n\n然后一路默认安装即可\n静态资源服务配置XAMPP 默认的网站目录都是在 /opt/lampp/htdocs 下的, 所有我们可以直接将静态资源目录链接到该目录下就可以了, 比如自定义的静态资源路径在 /server/static 下, 则\nsudo ln -s /server/static /opt/lampp/htdocs/static\n\n然后浏览器访问 http://www.domain.com/static 就能看到静态资源的目录结构了\nhttp://www.domain.com/static\n升级 HTTPS升级 TSL 为 HTTPS 提高安全性, 可以在 阿里云SSL 控制面里生成 CA 证书或者在服务器手动生成也行, 将证书文件放在服务器自定义目录下, 如：/server/cert\nsudo vi /opt/lampp/etc/extra/httpd-ssl.conf\n\n然后修改参数\nhttpd-ssl.conf&lt;VirtualHost *:443&gt;ServerName www.domain.com# 跨域Header set Access-Control-Allow-Origin *# 并找到下面三个参数修改为自定义证书路径SSLCertificateFile &quot;/server/cert/cert.crt&quot;SSLCertificateKeyFile &quot;/server/cert/cert.key&quot;SSLCertificateChainFile &quot;/server/cert/chain.crt&quot;\n\n保存并重启 Apache 服务即可用 https://www.domain.com 访问\nsudo /opt/lampp/lampp restartapache# 会打印XAMPP: Stopping Apache...ok.XAMPP: Starting Apache...ok.\n\n优化静态资源服务页面里, 如果有中文会默认显示成乱码, 所以可以添加字符编码配置\nsudo vi /opt/lampp/etc/httpd.conf\n\n添加一行\nhttpd.conf+ IndexOptions Charset=UTF-8\n\n保存并重启 Apache 服务\nsudo /opt/lampp/lampp restartapache# 会打印XAMPP: Stopping Apache...ok.XAMPP: Starting Apache...ok.\n\nFTP 服务上面部署了静态资源服务器, 为了方便更新资源, 搭建 FTP 服务器会方便很多\n添加 ftp 用户先创建 ftp 专用的用户组, 名字随意, 但为了区分所以带上 ftp 字样\nsudo groupadd ftpusers\n\n然后往该组添加一个用户\n\n-d 表示该用户 home 目录, 这里用上面静态资源服务器目录地址\n-g 表示隶属于哪个用户组\n-s 表示此用户的 shell 环境, 最后是用户名\n\nsudo useradd -d /server/static -g ftpusers -s /usr/sbin/nologin userftp\n\n设置密码sudo passwd userftp\n\n权限设置sudo chown userftp:ftpusers /server/staticsudo chmod 777 /server/static\n\n添加 shell 有效登录方式sudo vi /etc/shells\n\n在最后一行添加\nshells/usr/sbin/nologin\n\n配置 ProFTPD修改配置文件\nsudo vi /opt/lampp/etc/proftpd.conf\n\n修改下方参数\nproftpd.confServerName &quot;Your Any Name&quot; # 保留双引号Port 2121 # 自定义端口安全点&lt;Directory /server/static/*&gt;    AllowOverwrite on # 允许重写, 这样才能覆盖更新文件&lt;/Directory&gt;DefaultRoot ~ # 只允许在 home 目录下\n\n然后重启服务\nsudo /opt/lampp/lampp restart# 会打印Restarting XAMPP for Linux 7.4.8-0...XAMPP: Stopping Apache...ok.XAMPP: Stopping MySQL...not running.XAMPP: Stopping ProFTPD...ok.XAMPP: Starting Apache...ok.XAMPP: Starting MySQL...ok.XAMPP: Starting ProFTPD...ok.\n\n使用 FileZilla 连接 FTP 服务器安装 FileZilla 客户端, 下载地址：FileZilla 官网\n安装完成后, 打开 FileZilla, 点击左上角 “文件” 下方的 打开站点管理器 → 我的站点 → 新站点 → 命名 → 常规 添加配置\nFileZilla 客户端\n\n协议: FTP – 文件传输协议\n主机: 你的服务器域名\n端口: 上面 自定义配置的端口\n用户和密码: 也是上面添加的 用户和密码\n字符集标签页: 勾选 强制 UTF-8, 否则 FTP 服务器中文目录会显示乱码\n\n然后点击 确定 保存\nFileZilla 客户端\n最后回到主界面 打开站点管理器 旁边的下拉菜单, 点击刚刚添加的配置名字即可连接上 FTP 服务器\n","categories":["建站"],"tags":["ubuntu","xampp","apache","statistics","Filezilla","ftp"]}]
<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《黑神话悟空》性能测试</title>
    <url>/posts/black-myth-wukong-benchmark-tool/</url>
    <content><![CDATA[<p>《黑神话悟空》提前放出了性能测试工具, 赶紧看看我的电脑能有多少帧!</p>
<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>CPU: 13700k</li>
<li>主板: ASUS ROG MAXIMUS Z790 HERO</li>
<li>显卡: NVIDIA RTX 4090 24G</li>
<li>内存: 64G</li>
<li>系统: Win11</li>
<li>画质: 4K, 除了 <code>DLSS</code> 超采样清晰度, 其他全部最高</li>
</ul>
<h2 id="特效拉满测试"><a href="#特效拉满测试" class="headerlink" title="特效拉满测试"></a>特效拉满测试</h2><p>特效拉满情况下, 切换不同的 <code>DLSS</code> 超采样清晰度测试</p>
<h3 id="DLAA"><a href="#DLAA" class="headerlink" title="DLAA"></a>DLAA</h3><ul>
<li>超采样清晰度: 100</li>
<li>平均帧数: 43帧&#x2F;秒</li>
<li>显存占用: 12.4GB</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img1.png"
                      alt="[DLAA] 测试结果"
                ><figcaption>[DLAA] 测试结果</figcaption></figure></p>
<h3 id="质量"><a href="#质量" class="headerlink" title="质量"></a>质量</h3><ul>
<li>超采样清晰度: 88</li>
<li>平均帧数: 72帧&#x2F;秒</li>
<li>显存占用: 10.4GB</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img2.png"
                      alt="[质量] 测试结果"
                ><figcaption>[质量] 测试结果</figcaption></figure></p>
<h3 id="均衡"><a href="#均衡" class="headerlink" title="均衡"></a>均衡</h3><ul>
<li>超采样清晰度: 60</li>
<li>平均帧数: 86帧&#x2F;秒</li>
<li>显存占用: 9.8GB</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img3.png"
                      alt="[均衡] 测试结果"
                ><figcaption>[均衡] 测试结果</figcaption></figure></p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul>
<li>超采样清晰度: 53</li>
<li>平均帧数: 101帧&#x2F;秒</li>
<li>显存占用: 9.4GB</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img4.png"
                      alt="[性能] 测试结果"
                ><figcaption>[性能] 测试结果</figcaption></figure></p>
<h3 id="极致性能"><a href="#极致性能" class="headerlink" title="极致性能"></a>极致性能</h3><ul>
<li>超采样清晰度: 38</li>
<li>平均帧数: 135帧&#x2F;秒</li>
<li>显存占用: 8.7GB</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img5.png"
                      alt="[极致性能] 测试结果"
                ><figcaption>[极致性能] 测试结果</figcaption></figure></p>
<h2 id="优化设置"><a href="#优化设置" class="headerlink" title="优化设置"></a>优化设置</h2><h3 id="DLAA-1"><a href="#DLAA-1" class="headerlink" title="DLAA"></a>DLAA</h3><p>看了网上的科普, <code>DLAA</code> 并不属于 <code>DLSS</code> 而是抗锯齿, 不仅没有提高性能, 反而会更消耗性能</p>
<h3 id="偷帧的贼"><a href="#偷帧的贼" class="headerlink" title="偷帧的贼"></a>偷帧的贼</h3><p>看了 B 站 up 主 <a class="link"   href="https://space.bilibili.com/220929" >Fallere013<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 的测试视频: <a class="link"   href="https://www.bilibili.com/video/BV11WY2eUEjU" >偷帧的贼-黑神话画面设置-先行版<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, 总结如下图:</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img6.png"
                      alt="各种画质不同档位的性能差异"
                ><figcaption>各种画质不同档位的性能差异</figcaption></figure></p>
<h3 id="影响性能和观感的选项"><a href="#影响性能和观感的选项" class="headerlink" title="影响性能和观感的选项"></a>影响性能和观感的选项</h3><table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">原因</th>
</tr>
</thead>
<tbody><tr>
<td align="left">垂直同步</td>
<td align="left">强行对齐刷新率影响帧数</td>
</tr>
<tr>
<td align="left">动态模糊</td>
<td align="left">镜头晃动会变模糊影响观感</td>
</tr>
<tr>
<td align="left">全景光线追踪</td>
<td align="left">很耗性能, 但光影确实不错</td>
</tr>
<tr>
<td align="left">阴影</td>
<td align="left">阴影计算对帧数影响很大</td>
</tr>
<tr>
<td align="left">全局光照</td>
<td align="left">对帧数影响很大, 但并没有 <code>全景光线追踪</code> 有那么大影响, 略有模糊感</td>
</tr>
</tbody></table>
<h2 id="光影测试"><a href="#光影测试" class="headerlink" title="光影测试"></a>光影测试</h2><p>根据上一点提到的 <code>影响性能和观感的选项</code>, 关闭或调低这些选项分别测试</p>
<h3 id="全景光线追踪-低"><a href="#全景光线追踪-低" class="headerlink" title="全景光线追踪-低"></a>全景光线追踪-低</h3><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">垂直同步</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">动态模糊</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">DLSS</td>
<td align="center">质量(80)</td>
</tr>
<tr>
<td align="center">帧生成</td>
<td align="center">开</td>
</tr>
<tr>
<td align="center">全景光线追踪</td>
<td align="center">低</td>
</tr>
<tr>
<td align="center">阴影</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">全局光照</td>
<td align="center">低</td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">影视级</td>
</tr>
</tbody></table>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img7.png"
                      alt="[全景光线追踪-低] 测试结果"
                ><figcaption>[全景光线追踪-低] 测试结果</figcaption></figure></p>
<h3 id="全景光线追踪-中"><a href="#全景光线追踪-中" class="headerlink" title="全景光线追踪-中"></a>全景光线追踪-中</h3><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">垂直同步</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">动态模糊</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">DLSS</td>
<td align="center">质量(80)</td>
</tr>
<tr>
<td align="center">帧生成</td>
<td align="center">开</td>
</tr>
<tr>
<td align="center">全景光线追踪</td>
<td align="center">中</td>
</tr>
<tr>
<td align="center">阴影</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">全局光照</td>
<td align="center">低</td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">影视级</td>
</tr>
</tbody></table>
<p>测试结果如下:</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img8.png"
                      alt="[全景光线追踪-中] 测试结果"
                ><figcaption>[全景光线追踪-中] 测试结果</figcaption></figure></p>
<h3 id="全景光线追踪-超高"><a href="#全景光线追踪-超高" class="headerlink" title="全景光线追踪-超高"></a>全景光线追踪-超高</h3><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">垂直同步</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">动态模糊</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">DLSS</td>
<td align="center">质量(80)</td>
</tr>
<tr>
<td align="center">帧生成</td>
<td align="center">开</td>
</tr>
<tr>
<td align="center">全景光线追踪</td>
<td align="center">超高</td>
</tr>
<tr>
<td align="center">阴影</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">全局光照</td>
<td align="center">低</td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">影视级</td>
</tr>
</tbody></table>
<p>测试结果如下:</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img9.png"
                      alt="[全景光线追踪-超高] 测试结果"
                ><figcaption>[全景光线追踪-超高] 测试结果</figcaption></figure></p>
<h3 id="全局光照-高"><a href="#全局光照-高" class="headerlink" title="全局光照-高"></a>全局光照-高</h3><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">垂直同步</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">动态模糊</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">DLSS</td>
<td align="center">质量(80)</td>
</tr>
<tr>
<td align="center">帧生成</td>
<td align="center">开</td>
</tr>
<tr>
<td align="center">全景光线追踪</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">阴影</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">全局光照</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">影视级</td>
</tr>
</tbody></table>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img10.png"
                      alt="[全局光照-高] 测试结果"
                ><figcaption>[全局光照-高] 测试结果</figcaption></figure></p>
<h3 id="全局光照-超高"><a href="#全局光照-超高" class="headerlink" title="全局光照-超高"></a>全局光照-超高</h3><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">垂直同步</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">动态模糊</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">DLSS</td>
<td align="center">质量(80)</td>
</tr>
<tr>
<td align="center">帧生成</td>
<td align="center">开</td>
</tr>
<tr>
<td align="center">全景光线追踪</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">阴影</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">全局光照</td>
<td align="center">超高</td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">影视级</td>
</tr>
</tbody></table>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img11.png"
                      alt="[全局光照-超高] 测试结果"
                ><figcaption>[全局光照-超高] 测试结果</figcaption></figure></p>
<h3 id="全局光照-影视级"><a href="#全局光照-影视级" class="headerlink" title="全局光照-影视级"></a>全局光照-影视级</h3><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">垂直同步</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">动态模糊</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">DLSS</td>
<td align="center">质量(80)</td>
</tr>
<tr>
<td align="center">帧生成</td>
<td align="center">开</td>
</tr>
<tr>
<td align="center">全景光线追踪</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">阴影</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">全局光照</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">其他</td>
<td align="center">影视级</td>
</tr>
</tbody></table>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/black-myth-wukong-benchmark-tool/img12.png"
                      alt="[全局光照-影视级] 测试结果"
                ><figcaption>[全局光照-影视级] 测试结果</figcaption></figure></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol>
<li><code>全景光线追踪</code> 对性能影响特别大, 明暗效果挺好</li>
<li><code>全局光照</code> 帧数要比开启 <code>全景光线追踪</code> 高很多, 所以倾向于 <code>全局光照</code> 多些</li>
<li><code>全局光照</code> 几个档位之间帧数差 [影视级 - 高]: 13 帧, [影视级 - 超高]: 4 帧, [超高 - 高]: 9 帧 </li>
<li>综合考虑, 光影倾向于只打开 <code>全局光照</code> 影视级</li>
</ol>
<p>最终设置:</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">垂直同步</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">动态模糊</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">DLSS</td>
<td align="center">质量(80)</td>
</tr>
<tr>
<td align="center">帧生成</td>
<td align="center">开</td>
</tr>
<tr>
<td align="center">全景光线追踪</td>
<td align="center">关</td>
</tr>
<tr>
<td align="center">视野距离</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">抗锯齿</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">后期处理</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">阴影质量</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">贴图质量</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">特效质量</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">毛发质量</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">植被质量</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">全局光照</td>
<td align="center">影视级</td>
</tr>
<tr>
<td align="center">反射质量</td>
<td align="center">影视级</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>game</tag>
        <tag>wukong</tag>
        <tag>black myth</tag>
        <tag>performance testing</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 ssh 连接自动断开</title>
    <url>/posts/fix-ssh-auto-disconnect/</url>
    <content><![CDATA[<p>ssh 连接远程服务器时, 默认情况会自动断开, 需要修改设置以保持连接</p>
<span id="more"></span>

<h2 id="远程主机"><a href="#远程主机" class="headerlink" title="远程主机"></a>远程主机</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div>

<p>修改发送客户端 <code>KeepAlive</code> 时间间隔(秒) 和 超时次数</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>sshd_config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- ClientAliveInterval 0</span></span><br><span class="line"><span class="addition">+ ClientAliveInterval 30</span></span><br><span class="line"><span class="deletion">- ClientAliveCountMax 3</span></span><br><span class="line"><span class="addition">+ ClientAliveCountMax 30</span></span><br></pre></td></tr></table></figure></div>

<p>总时间为: 30 × 30, 即 15 分钟没有操作则终端断开, 保存并重启 <code>ssh</code> 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">service sshd reload</span><br></pre></td></tr></table></figure></div>

<h2 id="本地终端"><a href="#本地终端" class="headerlink" title="本地终端"></a>本地终端</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi  ~/.ssh/config</span><br></pre></td></tr></table></figure></div>

<p>所有主机都是同样的间隔</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ Host *</span></span><br><span class="line"><span class="addition">+     ServerAliveInterval 30</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 优化</title>
    <url>/posts/git-opt/</url>
    <content><![CDATA[<p>优化 Git 的命令和设置, 方便使用</p>
<span id="more"></span>

<h2 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.gitconfig</span><br></pre></td></tr></table></figure></div>
<p>添加命令别名</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>.gitconfig</span></figcaption><table><tr><td class="code"><pre><span class="line">[alias]</span><br><span class="line">    st = status</span><br><span class="line">    co = checkout</span><br><span class="line">    ci = commit</span><br><span class="line">    br = branch</span><br><span class="line">    sub = submodule</span><br><span class="line">    cp = cherry-pick</span><br><span class="line">    tail = log -3</span><br></pre></td></tr></table></figure></div>

<h2 id="去掉-END-提示"><a href="#去掉-END-提示" class="headerlink" title="去掉 (END) 提示"></a>去掉 (END) 提示</h2><p>有可能会出现输入 <code>git br</code> 和 <code>git log</code> 后, 列表会出现 <code>(END)</code> 且需要手动输入 <code>q</code> 退出, 执行以下代码即可</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global pager.branch <span class="literal">false</span></span><br><span class="line">git config --global pager.log <span class="literal">false</span></span><br></pre></td></tr></table></figure></div>

<h2 id="记住用户名和密码"><a href="#记住用户名和密码" class="headerlink" title="记住用户名和密码"></a>记住用户名和密码</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></div>

<h2 id="git-diff-去掉-M"><a href="#git-diff-去掉-M" class="headerlink" title="git diff 去掉 ^M"></a>git diff 去掉 ^M</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.whitespace cr-at-eol</span><br></pre></td></tr></table></figure></div>

<h2 id="忽略文件权限变化"><a href="#忽略文件权限变化" class="headerlink" title="忽略文件权限变化"></a>忽略文件权限变化</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.filemode <span class="literal">false</span></span><br></pre></td></tr></table></figure></div>

<h2 id="git-shell-中文文件显示"><a href="#git-shell-中文文件显示" class="headerlink" title="git shell 中文文件显示"></a>git shell 中文文件显示</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure></div>

<h2 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h2><h3 id="http代理"><a href="#http代理" class="headerlink" title="http代理"></a>http代理</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure></div>

<h3 id="socks5代理"><a href="#socks5代理" class="headerlink" title="socks5代理"></a>socks5代理</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure></div>

<h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Rebar3 安装</title>
    <url>/posts/install-rebar3/</url>
    <content><![CDATA[<p>安装 rebar3 便于 Erlang 编译、配置管理和发布</p>
<span id="more"></span>

<h2 id="下载或生成-rebar3"><a href="#下载或生成-rebar3" class="headerlink" title="下载或生成 rebar3"></a>下载或生成 rebar3</h2><h3 id="编译过的稳定版"><a href="#编译过的稳定版" class="headerlink" title="编译过的稳定版"></a>编译过的稳定版</h3><p>下载 <code>rebar3</code> 文件并赋予可执行属性</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://s3.amazonaws.com/rebar3/rebar3 &amp;&amp; <span class="built_in">chmod</span> +x rebar3</span><br></pre></td></tr></table></figure></div>

<h3 id="从源码编译生成"><a href="#从源码编译生成" class="headerlink" title="从源码编译生成"></a>从源码编译生成</h3><p>前提是已经 <a href="/posts/win10-wsl-erlang">安装 Erlang</a>, 然后从仓库将源文件拉取下来并编译生成 <code>rebar3</code></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/erlang/rebar3.git</span><br><span class="line"><span class="built_in">cd</span> rebar3</span><br><span class="line">./bootstrap</span><br></pre></td></tr></table></figure></div>
<p>完成后在目录下会出现 <code>rebar3</code> 文件</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./rebar3 <span class="built_in">local</span> install</span><br></pre></td></tr></table></figure></div>

<p>将会看到</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">===&gt; Extracting rebar3 libs to YourHome/.cache/rebar3/lib...</span><br><span class="line">===&gt; Writing rebar3 run script YourHome/.cache/rebar3/bin/rebar3...</span><br><span class="line">===&gt; Add to <span class="variable">$PATH</span> <span class="keyword">for</span> use: <span class="built_in">export</span> PATH=YourHome/.cache/rebar3/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></div>

<h2 id="添加全局环境变量"><a href="#添加全局环境变量" class="headerlink" title="添加全局环境变量"></a>添加全局环境变量</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/profile</span><br></pre></td></tr></table></figure></div>

<p>复制安装后提示的 <code>export</code> 语句, 并在 <code>profile</code> 最后加入</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>config profile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ export PATH=~/.cache/rebar3/bin:$PATH</span></span><br></pre></td></tr></table></figure></div>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">rebar3 compile</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>rebar3</tag>
        <tag>erlang</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Ubuntu-18.04 和 WordPress 搭建博客</title>
    <url>/posts/ubuntu-1804-wordpress/</url>
    <content><![CDATA[<p>WordPress 有很优秀的博客文章管理, 也有很多的主题和插件可以制作各种各样的网站, 甚至购物网站, 这篇文章将帮助你基于 Ubuntu-18.04 部署 WordPress 搭建博客</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>系统: Ubuntu 18.04 ×64</li>
<li>服务: Apache 2</li>
<li>语言: PHP 7.4</li>
<li>数据库: MySQL 5.7</li>
<li>网站框架: WordPress 5.4.2–zh_CN</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure></div>

<h3 id="添加-ppa-源"><a href="#添加-ppa-源" class="headerlink" title="添加 ppa 源"></a>添加 ppa 源</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install software-properties-common -y</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:ondrej/php</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure></div>

<h2 id="安装所需要的软件"><a href="#安装所需要的软件" class="headerlink" title="安装所需要的软件"></a>安装所需要的软件</h2><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install apache2 -y</span><br></pre></td></tr></table></figure></div>

<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php7.4 -y</span><br><span class="line"><span class="built_in">sudo</span> apt install libapache2-mod-php7.4 -y</span><br></pre></td></tr></table></figure></div>

<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php7.4-mysql -y</span><br><span class="line"><span class="built_in">sudo</span> apt install mysql-server -y</span><br></pre></td></tr></table></figure></div>

<h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p>到官方简体中文网手动下载: <a class="link"   href="https://cn.wordpress.org/download/" >cn.wordpress.org&#x2F;download<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 或者执行: </p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cn.wordpress.org/latest-zh_CN.tar.gz</span><br></pre></td></tr></table></figure></div>

<p>下载后解压并拷贝到目录 <code>/var/www/html/</code> 下</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxf latest-zh_CN.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> -f wordpress/ /var/www/html/</span><br></pre></td></tr></table></figure></div>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="修改-wordpress-文件夹的所有者和读写属性"><a href="#修改-wordpress-文件夹的所有者和读写属性" class="headerlink" title="修改 wordpress 文件夹的所有者和读写属性"></a>修改 wordpress 文件夹的所有者和读写属性</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br></pre></td></tr></table></figure></div>

<h3 id="将-wp-替换为你的用户名"><a href="#将-wp-替换为你的用户名" class="headerlink" title="将 wp 替换为你的用户名"></a>将 wp 替换为你的用户名</h3><p><code>www-data</code> 是服务器的默认组</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R wp:www-data wordpress</span><br></pre></td></tr></table></figure></div>

<h3 id="修改读写属性"><a href="#修改读写属性" class="headerlink" title="修改读写属性"></a>修改读写属性</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 -R wordpress</span><br></pre></td></tr></table></figure></div>

<h3 id="启用-Apache-Rewrite-操作"><a href="#启用-Apache-Rewrite-操作" class="headerlink" title="启用 Apache Rewrite 操作"></a>启用 Apache Rewrite 操作</h3><p>让其能够重定向你的访问链接</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> a2enmod rewrite</span><br></pre></td></tr></table></figure></div>

<h3 id="配置-MySQL-数据库"><a href="#配置-MySQL-数据库" class="headerlink" title="配置 MySQL 数据库"></a>配置 MySQL 数据库</h3><p>用于后面的网站数据存储, 先给 <code>MySQL</code> 控制台 <code>root</code> 用户添加免密登录</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></div>

<p>在最后一行添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>mysqld.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ skip-grant-tables</span></span><br></pre></td></tr></table></figure></div>

<p>重启服务后进入 <code>MySQL</code> 控制台</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mysql restart  <span class="comment"># 重启服务</span></span><br><span class="line">mysql -u root -p            <span class="comment"># 直接回车进入</span></span><br></pre></td></tr></table></figure></div>

<h3 id="修改-MySQL-root-用户的密码"><a href="#修改-MySQL-root-用户的密码" class="headerlink" title="修改 MySQL root 用户的密码"></a>修改 MySQL root 用户的密码</h3><p>将 <code>xxxxxx</code> 替换为你自己的密码</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>PASSWORD(<span class="string">&#x27;xxxxxx&#x27;</span>), plugin<span class="operator">=</span><span class="string">&#x27;mysql_native_password&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></div>

<p>这样下次进入时就使用自己定义的密码登录 <code>MySQL</code> 控制台了, 然后记得回到 <code>mysqld.cnf</code> 把刚刚添加的 <code>skip-grant-tables</code> 删除, 否则不安全</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></div>
<p>删除</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>mysqld.cnf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- skip-grant-tables</span></span><br></pre></td></tr></table></figure></div>

<p>重启服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mysql restart</span><br></pre></td></tr></table></figure></div>

<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>将 <code>xxxxxx</code> 替换为你自己的密码</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database wordpressdb;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> wordpress<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> wordpressdb.<span class="operator">*</span> <span class="keyword">TO</span> wordpress<span class="variable">@localhost</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></div>

<h2 id="配置-Apache-主页"><a href="#配置-Apache-主页" class="headerlink" title="配置 Apache 主页"></a>配置 Apache 主页</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/apache2/sites-enabled/000-default.conf</span><br></pre></td></tr></table></figure></div>

<h3 id="修改主页在-wordpress-目录下"><a href="#修改主页在-wordpress-目录下" class="headerlink" title="修改主页在 wordpress 目录下"></a>修改主页在 wordpress 目录下</h3><div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>000-default.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- DocumentRoot /var/www/html</span></span><br><span class="line"><span class="addition">+ DocumentRoot /var/www/html/wordpress</span></span><br></pre></td></tr></table></figure></div>

<h3 id="修改-Apache-服务器对文件夹的读写限制"><a href="#修改-Apache-服务器对文件夹的读写限制" class="headerlink" title="修改 Apache 服务器对文件夹的读写限制"></a>修改 Apache 服务器对文件夹的读写限制</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure></div>

<p>将原来的</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>apache2.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">  &lt;Directory /var/www/&gt;</span><br><span class="line"><span class="deletion">-     Options Indexes FollowSymLinks</span></span><br><span class="line"><span class="addition">+     Options FollowSymLinks</span></span><br><span class="line"><span class="deletion">-     AllowOverride None</span></span><br><span class="line"><span class="addition">+     AllowOverride All</span></span><br><span class="line">      Require all granted</span><br><span class="line">  &lt;/Directory&gt;</span><br></pre></td></tr></table></figure></div>

<p>并在最后添加一行域名地址, 否则重启服务会报错</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>apache2.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">ServerName www.domain.com</span><br></pre></td></tr></table></figure></div>

<h2 id="修改-WordPress-数据库配置"><a href="#修改-WordPress-数据库配置" class="headerlink" title="修改 WordPress 数据库配置"></a>修改 WordPress 数据库配置</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/wordpress/</span><br><span class="line"><span class="built_in">cp</span> wp-config-sample.php wp-config.php</span><br><span class="line"><span class="built_in">sudo</span> vi wp-config.php</span><br></pre></td></tr></table></figure></div>

<p>将要连接的数据库设置为前面 <code>MySQL</code> 控制台所配置的</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><figcaption><span>wp-config.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** //</span></span><br><span class="line"><span class="comment">/** WordPress数据库的名称 */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wordpressdb&#x27;</span> );</span><br><span class="line"><span class="comment">/** MySQL数据库用户名 */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span> );</span><br><span class="line"><span class="comment">/** MySQL数据库密码 */</span></span><br><span class="line"><span class="comment">// 将 xxxxxx 替换为前面配置数据的密码</span></span><br><span class="line"><span class="title function_ invoke__">define</span>( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;xxxxxx&#x27;</span> );</span><br></pre></td></tr></table></figure></div>

<p>并在最后面添加 <code>WordPress</code> 进行更新时免登录的配置</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>wp-config.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ define(&quot;FS_METHOD&quot;, &quot;direct&quot;);</span></span><br><span class="line"><span class="addition">+ define(&quot;FS_CHMOD_DIR&quot;, 0777);</span></span><br><span class="line"><span class="addition">+ define(&quot;FS_CHMOD_FILE&quot;, 0777);</span></span><br></pre></td></tr></table></figure></div>

<p>重启服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mysql restart</span><br><span class="line"><span class="built_in">sudo</span> apache2ctl restart</span><br></pre></td></tr></table></figure></div>

<p>到这里已经可以用你的域名访问 <code>WordPress</code> 进行网站的初始化配置了~</p>
<h2 id="ssl-配置"><a href="#ssl-配置" class="headerlink" title="ssl 配置"></a>ssl 配置</h2><p>若你的域名是 <code>http</code> 类型的, 可以在阿里云申请免费 <code>ssl</code> 证书, 将 <code>http</code> 升级为 <code>https</code>, 申请比较简单这里就不说了</p>
<p>选择 <code>Apache</code> 服务器类型的证书下载, 并上传到 <code>/etc/apache2/xxx</code> 目录下, 如 <code>/etc/apache2/cert</code></p>
<h3 id="启用-SSL-模块"><a href="#启用-SSL-模块" class="headerlink" title="启用 SSL 模块"></a>启用 SSL 模块</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> a2enmod ssl</span><br></pre></td></tr></table></figure></div>

<p>可以执行命令查看是否自动生成 <code>default-ssl.conf</code> 文件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ll /etc/apache2/sites-available/</span><br></pre></td></tr></table></figure></div>

<p>应该会看到</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">total 20</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun 22 12:26 ./</span><br><span class="line">drwxr-xr-x 9 root root 4096 Jun 22 12:27 ../</span><br><span class="line">-rw-r--r-- 1 root root 1342 Jun 22 10:28 000-default.conf</span><br><span class="line">-rw-r--r-- 1 root root 6308 Jun 22 10:47 default-ssl.conf</span><br></pre></td></tr></table></figure></div>

<h3 id="修改-SSL-配置文件"><a href="#修改-SSL-配置文件" class="headerlink" title="修改 SSL 配置文件"></a>修改 SSL 配置文件</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/apache2/sites-available/default-ssl.conf</span><br></pre></td></tr></table></figure></div>

<p>将对应的参数修改为你自己的内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>default-ssl.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_ssl.c&gt;</span><br><span class="line">    &lt;VirtualHost *:443&gt;</span><br><span class="line">        # 添加ServerName, 域名替换为你自己的</span><br><span class="line">        ServerName www.domain.com</span><br><span class="line">        DocumentRoot /var/www/html/wordpress</span><br><span class="line">        ...</span><br><span class="line">        SSLCertificateFile /etc/apache2/cert/cert.crt</span><br><span class="line">        SSLCertificateKeyFile /etc/apache2/cert/cert.key</span><br><span class="line">        ...</span><br><span class="line">        SSLCertificateChainFile /etc/apache2/cert/chain.crt</span><br></pre></td></tr></table></figure></div>

<h3 id="创建软连接进行关联"><a href="#创建软连接进行关联" class="headerlink" title="创建软连接进行关联"></a>创建软连接进行关联</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf</span><br></pre></td></tr></table></figure></div>

<p>重新加载 Apache 配置文件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 force-reload</span><br></pre></td></tr></table></figure></div>

<p>重启 Apache 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></div>

<p>然后使用 <code>https://www.domain.com</code> 访问你的域名, 看是否能正常访问并且域名左边有个小锁头, 说明成功~</p>
<h2 id="强制-https-访问"><a href="#强制-https-访问" class="headerlink" title="强制 https 访问"></a>强制 https 访问</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/wordpress/</span><br><span class="line"><span class="built_in">sudo</span> vi .htaccess</span><br></pre></td></tr></table></figure></div>

<p>在配置里最后增加两行, 必须在 <code>&lt;IfModule&gt;</code> 以外, 否则会被自动重写从而丢失</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>.htaccess</span></figcaption><table><tr><td class="code"><pre><span class="line">  &lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ ## END WordPress</span></span><br><span class="line"><span class="addition">+ ## 强制 HTTPS 访问</span></span><br><span class="line"><span class="addition">+ RewriteCond %&#123;SERVER_PORT&#125; !^443$</span></span><br><span class="line"><span class="addition">+ RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]</span></span><br></pre></td></tr></table></figure></div>

<p>这样用 <code>http</code> 访问也会自动跳转到 <code>https</code>, 同时最好也在 <code>WordPress</code> 后台管理的 个人资料 和 设置 里面的把 站点&#x2F;域名 都改为 <code>https</code> 类型的</p>
<h2 id="美化-WordPress-搜索-url"><a href="#美化-WordPress-搜索-url" class="headerlink" title="美化 WordPress 搜索 url"></a>美化 WordPress 搜索 url</h2><p>将搜索后的 url 从 <code>https://www.domain.com/?s=搜索词</code> 变为 <code>https://www.domain.com/search/搜索词</code></p>
<p>在主题函数模板 <code>functions.php</code> 最后添加即可</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><figcaption><span>functions.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//搜索美化伪静态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_search_url_rewrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">is_search</span>() &amp;&amp; ! <span class="keyword">empty</span>( <span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>] ) ) &#123;</span><br><span class="line">        <span class="title function_ invoke__">wp_redirect</span>( <span class="title function_ invoke__">home_url</span>( <span class="string">&#x27;/search/&#x27;</span> ) . <span class="title function_ invoke__">urlencode</span>( <span class="title function_ invoke__">get_query_var</span>( <span class="string">&#x27;s&#x27;</span> ) ) );</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ( <span class="title function_ invoke__">is_search</span>() &amp;&amp; <span class="keyword">empty</span>( <span class="title function_ invoke__">get_query_var</span>( <span class="string">&#x27;s&#x27;</span> ) ) ) &#123;</span><br><span class="line">        <span class="title function_ invoke__">wp_redirect</span>( <span class="title function_ invoke__">home_url</span>( <span class="string">&#x27;/search&#x27;</span> ) );</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">add_action</span>( <span class="string">&#x27;template_redirect&#x27;</span>, <span class="string">&#x27;change_search_url_rewrite&#x27;</span> );</span><br></pre></td></tr></table></figure></div>

<h2 id="安装-PHP-模组"><a href="#安装-PHP-模组" class="headerlink" title="安装 PHP 模组"></a>安装 PHP 模组</h2><p>安装完后在 <code>管理后台</code> – <code>工具</code> – <code>站点健康</code> 会看到 <code>WordPress</code> 检测到 <code>PHP</code> 缺失的模组, 根据提示的模组名字一个个安装即可, 比如 <code>curl</code></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache search curl | grep php</span><br></pre></td></tr></table></figure></div>

<p>可能得到:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">php7.2-curl - CURL module <span class="keyword">for</span> PHP</span><br><span class="line">php-http-request2 - Provides an easy way to perform HTTP requests</span><br><span class="line">php-curl - CURL module <span class="keyword">for</span> PHP [default]</span><br><span class="line">php5.6-curl - CURL module <span class="keyword">for</span> PHP</span><br><span class="line">php7.0-curl - CURL module <span class="keyword">for</span> PHP</span><br><span class="line">php7.1-curl - CURL module <span class="keyword">for</span> PHP</span><br><span class="line">php7.3-curl - CURL module <span class="keyword">for</span> PHP</span><br><span class="line">php7.4-curl - CURL module <span class="keyword">for</span> PHP</span><br></pre></td></tr></table></figure></div>

<p>根据搜索结果安装与当前 php 版本相同的模组</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php7.4-curl -y</span><br></pre></td></tr></table></figure></div>

<p>提示缺失的模组全部安装完后重启 <code>Apache2</code> 服务即可</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></div>

<p>又或者直接执行下面命令, 全部一次性安装</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php-curl php-gd php-xml php-mbstring  php-xmlrpc php-zip php-soap php-intl php-imagick -y</span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>wordpress</tag>
        <tag>apache</tag>
        <tag>mysql</tag>
        <tag>php</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 终端优化</title>
    <url>/posts/ubuntu-bash-opt/</url>
    <content><![CDATA[<p>修改 .bashrc 等配置优化 ubuntu shell </p>
<span id="more"></span>

<h2 id="简化-PS1"><a href="#简化-PS1" class="headerlink" title="简化 PS1"></a>简化 PS1</h2><p>修改 <code>.bashrc</code></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<p>添加 <code>PS1</code> 配置</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ export PS1=&quot;\[\e]0;$&#123;debian_chroot:+($debian_chroot)&#125;\w\a\]\[\e[35;1m\]\u \[\e[37;1m\]in \[\e[36;1m\]\W \[\e[0m\]&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>应用环境变量 或 开启新终端</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<p>终端将从</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gelomen@GELOMEN-PC:~$</span><br></pre></td></tr></table></figure></div>

<p>变为</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gelomen <span class="keyword">in</span> ~ </span><br></pre></td></tr></table></figure></div>

<h2 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.inputrc</span><br></pre></td></tr></table></figure></div>

<p>添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>.inputrc</span></figcaption><table><tr><td class="code"><pre><span class="line">set completion-ignore-case on</span><br></pre></td></tr></table></figure></div>

<h2 id="解决左右跳单词-5D-5C"><a href="#解决左右跳单词-5D-5C" class="headerlink" title="解决左右跳单词 ;5D;5C"></a>解决左右跳单词 ;5D;5C</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.inputrc</span><br></pre></td></tr></table></figure></div>

<p>添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>.inputrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ &quot;\e[1;5C&quot;: forward-word     # ctrl + →</span></span><br><span class="line"><span class="addition">+ &quot;\e[1;5D&quot;: backward-word    # ctrl + ←</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>优化</tag>
        <tag>ubuntu</tag>
        <tag>bash</tag>
        <tag>shell</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 Apache2 CORS</title>
    <url>/posts/ubuntu-2004-apache2-cors/</url>
    <content><![CDATA[<p>解决 Ubuntu 20.04 下 Apache2 CORS 问题</p>
<span id="more"></span>

<p>修改配置, 开启 <code>Header</code> 功能</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> a2enmod headers</span><br></pre></td></tr></table></figure></div>

<p>修改 <code>Apache</code> 配置, 其他系统是 <code>httpd.conf</code>, 但在 <code>Ubuntu</code> 系统中是 <code>/etc/apache2/apache2.conf</code></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure></div>

<p>在 <code>&lt;Directory /var/www/&gt;</code> 下添加一行 <code>Access-Control-Allow-Origin</code> 的配置</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>apache2.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">  &lt;Directory /var/www/&gt;</span><br><span class="line">      Options FollowSymLinks</span><br><span class="line">      AllowOverride All</span><br><span class="line">      Require all granted</span><br><span class="line"><span class="addition">+     Header set Access-Control-Allow-Origin *</span></span><br><span class="line">  &lt;/Directory&gt;</span><br></pre></td></tr></table></figure></div>

<p>保存退出, 然后检测配置是否有错</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apachectl -t</span><br></pre></td></tr></table></figure></div>

<p>正常情况应该得到</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax OK</span><br></pre></td></tr></table></figure></div>

<p>重新加载配置并重启服务即可</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 force-reload</span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>apache</tag>
        <tag>cors</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Apache2 Alias 映射目录</title>
    <url>/posts/ubuntu-apache2-alias-virtual-host/</url>
    <content><![CDATA[<p>在 Ubuntu Apache2 下使用 Alias 关联虚拟目录到某个路径</p>
<span id="more"></span>

<p><code>Ubuntu</code> 系统, 如果你的网站不在 <code>Apache2</code> 的 <code>/var/www/html</code> 目录下, 可以使用 <code>Alias</code> 绑定自定义目录, 同时可以起到自定义为自己要的 <code>url</code> 路径作用</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure></div>
<p>在最后添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>apache2.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ Alias /custom_name /some/directory/web</span></span><br></pre></td></tr></table></figure></div>

<p>访问的时候就可以这样: <a href="">http://www.yourdomain.com/custom_name</a> 访问 <code>Alias</code> 所映射目录下的资源</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>apache</tag>
        <tag>virtual host</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Ubuntu 20.04 XAMPP WordPress 搭建博客</title>
    <url>/posts/ubuntu-xampp-wordpress/</url>
    <content><![CDATA[<p>使用 <code>Ubuntu</code> <code>XAMPP</code> <code>WordPress</code> 便捷搭建博客</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>系统: Ubuntu 20.04 LTS</li>
<li>服务: XAMPP (Apache + MySQL + PHP + PERL)</li>
<li>框架: WordPress</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><p>先将 <code>Ubuntu</code> 系统更新到最新</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure></div>

<h3 id="安装-XAMPP"><a href="#安装-XAMPP" class="headerlink" title="安装 XAMPP"></a>安装 XAMPP</h3><p>到 <a class="link"   href="https://www.apachefriends.org/index.html" >XAMPP 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, 选择 <code>Linux</code> 版本下载, 在弹出的新页面复制地址栏链接, 然后在 <code>Ubuntu</code> 主机下载</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个链接可能是旧的, 以官网提供的地址为准</span></span><br><span class="line">wget https://www.apachefriends.org/xampp-files/7.4.8/xampp-linux-x64-7.4.8-0-installer.run</span><br></pre></td></tr></table></figure></div>

<p>赋予安装文件可执行权限</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./xampp-linux-x64-7.4.8-0-installer.run</span><br></pre></td></tr></table></figure></div>

<p>以 <code>root</code> 身份安装, 安装过程提示的内容都默认即可</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./xampp-linux-x64-7.4.8-0-installer.run</span><br></pre></td></tr></table></figure></div>

<p>安装完成后, <code>XAMPP</code> 目录在 <code>/opt/lampp</code> 下</p>
<h3 id="安装-WordPress"><a href="#安装-WordPress" class="headerlink" title="安装 WordPress"></a>安装 WordPress</h3><p>到官方简体中文网手动下载: <a class="link"   href="https://cn.wordpress.org/download/" >WordPress 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 或者执行:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cn.wordpress.org/latest-zh_CN.tar.gz</span><br></pre></td></tr></table></figure></div>

<p>下载后解压并移动到目录 <code>/opt/lampp/htdocs</code> 下</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxf latest-zh_CN.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> -f wordpress/ /opt/lampp/htdocs/</span><br></pre></td></tr></table></figure></div>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>到此最好有域名, 然后生成 SSL 证书, 如何生成证书这里就不赘述了</p>
<h3 id="配置-HTTP"><a href="#配置-HTTP" class="headerlink" title="配置 HTTP"></a>配置 HTTP</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/etc/httpd.conf</span><br></pre></td></tr></table></figure></div>

<p>将以下参数修改为自己的信息</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ServerName www.domain.com:80</span><br><span class="line">DocumentRoot <span class="string">&quot;/opt/lampp/htdocs/wordpress&quot;</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/opt/lampp/htdocs/wordpress&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>修改后保存并重启 <code>Apache</code> 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restartapache</span><br></pre></td></tr></table></figure></div>

<p>服务重启成功后, 使用 <a class="link"   href="http://www.domain.com/" >http://www.domain.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 访问你的域名就可以进入 <code>WordPress</code> 配置界面了</p>
<h3 id="升级-HTTPS"><a href="#升级-HTTPS" class="headerlink" title="升级 HTTPS"></a>升级 HTTPS</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/etc/extra/httpd-ssl.conf</span><br></pre></td></tr></table></figure></div>

<p>将以下参数修改为自己的信息</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">DocumentRoot <span class="string">&quot;/opt/lampp/htdocs/wordpress&quot;</span></span><br><span class="line">ServerName www.domain.com:443</span><br><span class="line">ServerAlias domain.com:443</span><br><span class="line"><span class="comment"># 并找到下面三个参数修改为自定义证书路径</span></span><br><span class="line">SSLCertificateFile <span class="string">&quot;/server/cert/cert.crt&quot;</span></span><br><span class="line">SSLCertificateKeyFile <span class="string">&quot;/server/cert/cert.key&quot;</span></span><br><span class="line">SSLCertificateChainFile <span class="string">&quot;/server/cert/chain.crt&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>修改后保存并重启 <code>Apache</code> 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restartapache</span><br></pre></td></tr></table></figure></div>

<p>服务重启成功后, 就可以使用 <a class="link"   href="https://www.domain.com/" >https://www.domain.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 访问你的网站</p>
<h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>允许 <code>phpmyadmin</code> 外网访问</p>
<p><code>XAMPP</code> 自带 <code>MySQL</code>, 同时也自带了 <code>phpmyadmin</code>, 方便管理数据库, 首先配置 <code>httpd-xampp.conf</code> 使其允许外网访问</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/etc/extra/httpd-xampp.conf</span><br></pre></td></tr></table></figure></div>

<p>找到 <code>&lt;Directory “/opt/lampp/phpmyadmin”&gt;</code> 修改参数</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>httpd-xampp.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/opt/lampp/phpmyadmin&quot;&gt;</span><br><span class="line"><span class="deletion">-    Require local</span></span><br><span class="line"><span class="addition">+    Require all granted</span></span><br></pre></td></tr></table></figure></div>

<p>保存并重启 <code>Apache</code> 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restartapache</span><br></pre></td></tr></table></figure></div>

<p>此时访问 <a class="link"   href="https://www.domain.com/phpmyadmin" >https://www.domain.com/phpmyadmin<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 即可进入 MySQL 管理页面</p>
<h4 id="phpmyadmin-账户登录"><a href="#phpmyadmin-账户登录" class="headerlink" title="phpmyadmin 账户登录"></a>phpmyadmin 账户登录</h4><p>目前外网可以直接访问 <code>phpmyadmin</code>, 没有提示登录, 这样任何人只要尝试访问都可以进入 <code>MySQL</code> 管理页面, 这样很危险, 所以需要修改 <code>phpmyadmin</code> 为账户登录方式进入</p>
<p>首先给 <code>localhost</code> 的 <code>root</code> 用户添加密码, 点击 <code>phpmyadmin</code> 的 账户 标签, 在下方找到 用户名 <code>root</code> – 主机名 <code>localhost</code> 一行后面点击 <code>修改权限</code></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img1.png"
                      alt="phpmyadmin 账户"
                ><figcaption>phpmyadmin 账户</figcaption></figure></p>
<p>点击 <code>修改密码</code> 按钮, 在下方输入密码, 点击 <code>执行</code> 按钮保存</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img2.png"
                      alt="修改密码"
                ><figcaption>修改密码</figcaption></figure></p>
<p>然后修改 <code>phpmyadmin</code> 配置文件, 使其不能自动登录</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/phpmyadmin/config.inc.php</span><br></pre></td></tr></table></figure></div>

<p>修改以下参数</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cfg</span>[<span class="string">&#x27;blowfish_secret&#x27;</span>] = <span class="string">&#x27;myblowfishsecretmyblowfishsecret&#x27;</span> <span class="comment"># 自定义且尽量长</span></span><br><span class="line"><span class="comment">/* Authentication type */</span></span><br><span class="line"><span class="variable">$cfg</span>[<span class="string">&#x27;Servers&#x27;</span>][<span class="variable">$i</span>][<span class="string">&#x27;auth_type&#x27;</span>] = <span class="string">&#x27;cookie&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<p>修改后保存并重启 <code>XAMPP</code> 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restart</span><br></pre></td></tr></table></figure></div>

<p>重启后访问 <a class="link"   href="https://www.domain.com/phpmyadmin" >https://www.domain.com/phpmyadmin<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 即可看到需要账号密码登录</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img3.png"
                      alt="phpmyadmin 登录"
                ><figcaption>phpmyadmin 登录</figcaption></figure></p>
<h4 id="phpmyadmin-强制-HTTPS-访问"><a href="#phpmyadmin-强制-HTTPS-访问" class="headerlink" title="phpmyadmin 强制 HTTPS 访问"></a>phpmyadmin 强制 HTTPS 访问</h4><p>默认使用 <code>http</code> 访问 <code>phpmyadmin</code> 是不会重定向到 <code>https</code> 的, 不安全, 所以可以修改配置让其重定向</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/etc/extra/httpd-xampp.conf</span><br></pre></td></tr></table></figure></div>

<p>找到 <code>&lt;IfModule mod_perl.c&gt;</code>, 在里面添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>httpd-xampp.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_perl.c&gt;</span><br><span class="line">        ...</span><br><span class="line"><span class="addition">+       PerlSendHeader On</span></span><br><span class="line"> </span><br><span class="line"><span class="addition">+       # 强制 HTTPS 访问</span></span><br><span class="line"><span class="addition">+       RewriteEngine On</span></span><br><span class="line"><span class="addition">+       RewriteCond %&#123;SERVER_PORT&#125; !^443$</span></span><br><span class="line"><span class="addition">+       RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></div>

<p>然后重启 <code>Apache</code> 服务, 再次用 <code>http</code> 访问 <code>phpmyadmin</code> 就可以自动跳转到 <code>https</code></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restartapache</span><br></pre></td></tr></table></figure></div>

<h4 id="WordPress-账号和数据库"><a href="#WordPress-账号和数据库" class="headerlink" title="WordPress 账号和数据库"></a>WordPress 账号和数据库</h4><p>需要创建 <code>WordPress</code> 专用的 <code>MySQL</code> 账户和数据库</p>
<h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><p>登录 <code>phpmyadmin</code> 后, 点击左侧数据库列表最顶部的 <code>新建</code> 或者点击 <code>数据库</code> 标签新建数据库, 数据库名字自定义, 最好是加上前缀, 比如我的数据库名字为: <code>clv_wp_db</code>, 点击 创建 按钮</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img4.png"
                      alt="创建数据库"
                ><figcaption>创建数据库</figcaption></figure></p>
<h5 id="新建账户"><a href="#新建账户" class="headerlink" title="新建账户"></a>新建账户</h5><p>点击左侧数据库列表新建的数据库, 然后点击 <code>权限</code> 标签, 就可以看到该数据库下的账户权限, 点击下方的 <code>新增用户账户</code> 按钮</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img5.png"
                      alt="新增用户账户"
                ><figcaption>新增用户账户</figcaption></figure></p>
<p>输入 <code>账号</code> 和 <code>密码</code>, 主机名选择 <code>本地</code>, 并滚动到下方将数据库全局权限的 <code>全选</code> 勾上, 然后点击 <code>执行</code> 保存</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img6.png"
                      alt="配置账户密码"
                ><figcaption>配置账户密码</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img7.png"
                      alt="配置账户权限"
                ><figcaption>配置账户权限</figcaption></figure></p>
<p>最后点击 <code>执行</code> 按钮, 跳转到新界面后, 会显示该新建账户在当前数据库权限, 也将 <code>全选</code> 勾上, 然后点击 <code>执行</code> 保存</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/ubuntu-xampp-wordpress/img8.png"
                      alt="配置账户权限"
                ><figcaption>配置账户权限</figcaption></figure></p>
<h5 id="配置-WordPress"><a href="#配置-WordPress" class="headerlink" title="配置 WordPress"></a>配置 WordPress</h5><p>修改 <code>WordPress</code> 目录权限</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lampp/htdocs</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R wp:www-data wordpress</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 777 wordpress</span><br></pre></td></tr></table></figure></div>

<p>复制 <code>wordpress</code> 目录下 <code>wp-config-sample.php</code> 为 <code>wp-config.php</code>, 并修改配置</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wordpress/</span><br><span class="line"><span class="built_in">cp</span> wp-config-sample.php wp-config.php</span><br><span class="line">vi wp-config.php</span><br></pre></td></tr></table></figure></div>

<p>修改数据库连接配置</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><figcaption><span>wp-config.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/** WordPress数据库的名称 */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;clv_wp_db&#x27;</span> );</span><br><span class="line"><span class="comment">/** MySQL数据库用户名 */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;test1&#x27;</span> );</span><br><span class="line"><span class="comment">/** MySQL数据库密码 */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span> );</span><br><span class="line"><span class="comment">/** WordPress数据表前缀 */</span></span><br><span class="line"><span class="variable">$table_prefix</span> = <span class="string">&#x27;clv_&#x27;</span>; <span class="comment"># 自定义, 我自己用数据库名字前缀</span></span><br></pre></td></tr></table></figure></div>

<p>并在该文件最后添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>wp-config.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ /** wordpress 后台管理安装插件不需 ftp 登录  */</span></span><br><span class="line"><span class="addition">+ define(&quot;FS_METHOD&quot;, &quot;direct&quot;);</span></span><br><span class="line"><span class="addition">+ define(&quot;FS_CHMOD_DIR&quot;, 0777);</span></span><br><span class="line"><span class="addition">+ define(&quot;FS_CHMOD_FILE&quot;, 0777);</span></span><br></pre></td></tr></table></figure></div>

<p>保存后直接访问你的域名 <a class="link"   href="https://www.domain.com/" >https://www.domain.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 即可初始化 <code>WordPress</code></p>
<h2 id="强制-HTTPS-访问"><a href="#强制-HTTPS-访问" class="headerlink" title="强制 HTTPS 访问"></a>强制 HTTPS 访问</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/htdocs/wordpress/.htaccess</span><br></pre></td></tr></table></figure></div>

<p>在 <code>&lt;/IfModule&gt;</code> 以外添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>.htaccess</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;/IfModule&gt;</span><br><span class="line"> </span><br><span class="line"># END WordPress</span><br><span class="line"> </span><br><span class="line"><span class="addition">+ # 强制 HTTPS 访问</span></span><br><span class="line"><span class="addition">+ RewriteCond %&#123;SERVER_PORT&#125; !^443$</span></span><br><span class="line"><span class="addition">+ RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]</span></span><br></pre></td></tr></table></figure></div>

<p>保存并重启 <code>Apache</code> 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restartapache</span><br></pre></td></tr></table></figure></div>

<p>此时用 <a class="link"   href="http://www.domain.com/" >http://www.domain.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 会自动跳转到 <a class="link"   href="https://www.domain.com/" >https://www.domain.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="美化-WordPress-搜索-url"><a href="#美化-WordPress-搜索-url" class="headerlink" title="美化 WordPress 搜索 url"></a>美化 WordPress 搜索 url</h2><p>将搜索后的 <code>url</code> 从 <a class="link"   href="https://www.domain.com/?s=%E6%90%9C%E7%B4%A2%E8%AF%8D" >https://www.domain.com/?s=搜索词<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 变为 <a class="link"   href="https://www.domain.com/search/%E6%90%9C%E7%B4%A2%E8%AF%8D" >https://www.domain.com/search/搜索词<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>在主题函数模板 <code>functions.php</code> 最后添加即可</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><figcaption><span>functions.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//搜索美化伪静态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_search_url_rewrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">is_search</span>() &amp;&amp; ! <span class="keyword">empty</span>( <span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>] ) ) &#123;</span><br><span class="line">        <span class="title function_ invoke__">wp_redirect</span>( <span class="title function_ invoke__">home_url</span>( <span class="string">&#x27;/search/&#x27;</span> ) . <span class="title function_ invoke__">urlencode</span>( <span class="title function_ invoke__">get_query_var</span>( <span class="string">&#x27;s&#x27;</span> ) ) );</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ( <span class="title function_ invoke__">is_search</span>() &amp;&amp; <span class="keyword">empty</span>( <span class="title function_ invoke__">get_query_var</span>( <span class="string">&#x27;s&#x27;</span> ) ) ) &#123;</span><br><span class="line">        <span class="title function_ invoke__">wp_redirect</span>( <span class="title function_ invoke__">home_url</span>( <span class="string">&#x27;/search&#x27;</span> ) );</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">add_action</span>( <span class="string">&#x27;template_redirect&#x27;</span>, <span class="string">&#x27;change_search_url_rewrite&#x27;</span> );</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>wordpress</tag>
        <tag>blog</tag>
        <tag>xampp</tag>
      </tags>
  </entry>
  <entry>
    <title>升级 Windows 10 v2004 和 wsl2</title>
    <url>/posts/upgrade-win10-v2004-wsl2/</url>
    <content><![CDATA[<p>Windows 10 v2004 正式版发布, 同时更快更好的 wsl2 也来了</p>
<span id="more"></span>

<h2 id="升级-Windows-系统"><a href="#升级-Windows-系统" class="headerlink" title="升级 Windows 系统"></a>升级 Windows 系统</h2><p>可以在 <code>开始</code> → <code>设置</code> → <code>更新和安全</code> → <code>Windows 更新</code> 获取最新版系统, 但有时候会一直提示已经是最新版系统, 这时可以下载安装官方更新助手 <a class="link"   href="https://www.microsoft.com/zh-cn/software-download/windows10" >易升<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>升级成功后可以在 <code>开始</code> → <code>设置</code> → <code>系统</code> → <code>关于</code> 中看到系统版本号为 <code>2004</code></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/upgrade-win10-v2004-wsl2/img1.png"
                      alt="系统版本信息"
                ><figcaption>系统版本信息</figcaption></figure></p>
<h2 id="系统功能开放"><a href="#系统功能开放" class="headerlink" title="系统功能开放"></a>系统功能开放</h2><p>升级 <code>wsl2</code> 需要先启动 <code>子系统功能</code> 和 <code>CPU 虚拟化</code></p>
<h3 id="开启子系统"><a href="#开启子系统" class="headerlink" title="开启子系统"></a>开启子系统</h3><p>键盘 <code>Windows + R</code> 打开 运行, 输入 <code>control</code> 打开 <code>控制版面</code> → <code>程序</code> → <code>程序和功能</code> → <code>启用或关闭 Windows 功能</code></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/upgrade-win10-v2004-wsl2/img2.png"
                      alt="启用或关闭 Windows 功能"
                ><figcaption>启用或关闭 Windows 功能</figcaption></figure></p>
<p>如图将 <code>适用于 Linux 的 Windows 子系统</code> 打开点击确定, 并按照提示重启系统</p>
<h3 id="开启-BIOS-CPU-虚拟化"><a href="#开启-BIOS-CPU-虚拟化" class="headerlink" title="开启 BIOS CPU 虚拟化"></a>开启 BIOS CPU 虚拟化</h3><p>不同品牌主板的 <code>BIOS</code> 各不相同, 但一般位置是在 <code>Security</code> → <code>Intel Virtual Technology</code> 或中文的 <code>高级</code> → <code>Intel 虚拟化</code></p>
<p>开启并重进系统后, 在 <code>任务管理器</code> → <code>性能</code> → <code>CPU</code> 可以看到 <code>虚拟化: 已启用</code></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/upgrade-win10-v2004-wsl2/img3.png"
                      alt="CPU 性能信息"
                ><figcaption>CPU 性能信息</figcaption></figure></p>
<h2 id="升级-wsl2"><a href="#升级-wsl2" class="headerlink" title="升级 wsl2"></a>升级 wsl2</h2><p>先下载 <code>wsl2</code> 更新包并安装: <a class="link"   href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel" >wsl2 更新包链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安装完后打开 <code>PowerShell</code>, 将安装的子系统从 <code>wsl</code> 迁移到 <code>wsl2</code></p>
<ul>
<li>命令 <code>wsl --set-version &#123;LinuxVersion&#125; &#123;WslVersion&#125;</code></li>
<li><code>LinuxVersion</code> 表示 <code>Linux</code> 子系统版本</li>
<li><code>WslVersion</code> 表示 <code>wsl</code> 的版本</li>
</ul>
<div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-version</span> Ubuntu<span class="literal">-18</span>.<span class="number">04</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<p>将会看到</p>
<div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">正在进行转换, 这可能需要几分钟时间...</span><br><span class="line">有关与 WSL <span class="number">2</span> 的主要区别的信息, 请访问 https://aka.ms/wsl2</span><br><span class="line">转换完成</span><br></pre></td></tr></table></figure></div>

<p>然后将 <code>wsl2</code> 设置为默认</p>
<div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<p>查看当前子系统和对应的 wsl 版本</p>
<div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure></div>

<p>将会看到</p>
<div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">  NAME            STATE           VERSION</span><br><span class="line">* Ubuntu<span class="literal">-18</span>.<span class="number">04</span>    Stopped         <span class="number">2</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>win10</tag>
        <tag>windows 10</tag>
        <tag>wsl</tag>
        <tag>wsl2</tag>
        <tag>子系统</tag>
        <tag>subsystem</tag>
      </tags>
  </entry>
  <entry>
    <title>Video Of You! 勒索诈骗邮件</title>
    <url>/posts/video-of-you-ransomware-email/</url>
    <content><![CDATA[<p>前几天看邮箱, 清理一些垃圾邮件时, 看到一份好几天前就发给我的邮件, 位置在垃圾箱里, 标题写着 Video Of You! 看到这名字就觉得不对劲, 不像普通的垃圾广告邮件, 这引起了我的注意…</p>
<span id="more"></span>

<h2 id="诈骗勒索邮件"><a href="#诈骗勒索邮件" class="headerlink" title="诈骗勒索邮件"></a>诈骗勒索邮件</h2><p>该邮件内容如下:</p>
<blockquote>
<p>Hey, some time ago your computer was infected with my private software, RAT (Remote Administration Tool).<br>My software gave me access to all your accounts, contacts and it was possible to spy on you over your webcam.<br>For example, I know that at the time of infection your password was: 我平时常用的密码<br>Sometimes I was spying on you and then once I was shocked seeing you started to MASTRUBATE, so I recorded you with the software called: Bandicam, Google it if you want.<br>I can share the video of you with all your friends, contacts, post it on social networks and everywhere else.<br>You can stop me, send 450$ with the cryptocurrency Ethereum (ETH).<br>It’s easy to buy Ethereum (ETH), for example here: btcdirect.eu , bitvavo.com , anycoindirect.eu , binance.com , or Google another exchanger.<br>My Ethereum (ETH) wallet is: 0x869C893E84618DA936274bADF3d9E800d0572955<br>Yes that’s how the wallet looks like, copy and paste it.<br>After receiving the payment, I will remove everything and you never hear from me again.<br>You got 3 days time!<br>Next time update your browser before browsing the web, so you won’t get infected again!</p>
</blockquote>
<ul>
<li>邮件内容大概意思是他黑了我的电脑, 可以拿到我所有的账户和联系人信息, 并通过网络摄像头监视我 （可我台式机没装摄像头啊哈哈哈哈哈!!! 😂）</li>
<li>然后贴出了我平时常用的密码, 从这一点上他的确黑到了我账户, 然后说有时监视我时, 看到我 ✊🏻🐔 就用 <code>Bandicam</code> 录了下来, 并威胁我他可以将视频发给我的所有朋友和社交网络上任何地方, 吓得我打开了 <strong>P</strong> 站 😏</li>
<li>重点来了, 只要我三天内用以太币 <code>ETH</code> 虚拟货币转给他 450 美元, 他就删除所有内容, 还提供了购买以太币的网址, 以及他的以太币钱包, 整片邮件言语之间都透露了一种 “我说的都是网上能查到的方式或工具在监视你” 的语气, 从而隐约的暗示这件事是真实的</li>
<li>因为我没有摄像头, 所以这邮件很明显是在骗我, 不过问题是, 他是怎么知道我常用密码的?! 是通过什么方式黑到我账户的?! </li>
<li>在网上查了下, 别人也有相同的经历, 邮件内容大同小异, 但都是用爆出你用的密码来让你相信你被黑并且被监控录了视频</li>
</ul>
<p>有网友说 前几年有几个大网站用户数据泄露并被人在暗网上出售</p>
<blockquote>
<p>名为 <code>CosmicDark</code> 的国外团队在暗网上公开出售的这份优酷用户资料, 售价 300 美元, 数据量超过 1 亿条, 其中包括邮箱、密码等关键数据。</p>
</blockquote>
<h2 id="‘-–have-i-been-pwned"><a href="#‘-–have-i-been-pwned" class="headerlink" title="‘;–have i been pwned?"></a>‘;–have i been pwned?</h2><ul>
<li><p>这时候有个牛逼的网站出来了：<a class="link"   href="https://haveibeenpwned.com/" >‘;–have i been pwned?<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, 这个网站收录了这几年来被黑客窃取、公布在网络上的名单资料, 只要输入你的邮箱, 即可快速比对这些被窃取的资料里有没有你的个人资料。</p>
</li>
<li><p><code>pwned</code> 是什么意思呢? 其实这是一个骇客用语, 由 <code>owned</code> 演化而来, 有「被攻破、入侵或是控制」的意思</p>
</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/video-of-you-ransomware-email/img1.png"
                      alt="‘;–have i been pwned?"
                ><figcaption>‘;–have i been pwned?</figcaption></figure></p>
<ul>
<li>进入 <a class="link"   href="https://haveibeenpwned.com/" >‘;–have i been pwned?<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 主页可以看到, 目前有 <strong>456</strong> 个网站泄露数据, 有 <strong>9,765,110,880</strong> 个账户被黑, 所以黑客利用这一点撒大网群发邮件, 总有人会上勾</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/video-of-you-ransomware-email/img2.png"
                      alt="‘;–have i been pwned?"
                ><figcaption>‘;–have i been pwned?</figcaption></figure></p>
<h2 id="查查哪些网站泄露了"><a href="#查查哪些网站泄露了" class="headerlink" title="查查哪些网站泄露了"></a>查查哪些网站泄露了</h2><ul>
<li>我用我的邮箱查了下, 我在 9 个网站的账户被泄露了, 往下滚动可以看到具体哪些网站泄露了我的账户</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/video-of-you-ransomware-email/img3.png"
                      alt="‘;–have i been pwned?"
                ><figcaption>‘;–have i been pwned?</figcaption></figure></p>
<p>使用工具翻译了下:</p>
<ul>
<li><p><strong>Adobe:</strong><br>2013年10月, <code>Adobe</code> 的1.53亿个账户被入侵, 每个账户包含内部ID、用户名、电子邮件、加密密码和明文的密码提示。密码的加密方式非常差, 很多密码很快被破解回明文状态。未加密的密码提示也暴露了更多的密码信息, 使得数以百万计的 <code>Adobe</code> 用户面临更大的风险。<br><strong>泄露数据:</strong> 电子邮件地址、密码提示、密码、用户名。</p>
</li>
<li><p><strong>Aipai.com (未经验证):</strong><br>2016年9月, 据称来自中国游戏网站 <a class="link"   href="https://www.aipai.com/" >Aipai.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 的数据泄露, 包含650万个账户的信息被泄露。虽然有证据表明数据是合法的, 但由于很难完全验证这一中国数据泄露事件, 因而标记为“未经验证”。泄露的数据包括电子邮件地址和 <code>MD5</code> 密码哈希值。<br><strong>泄露数据:</strong> 电子邮件地址、密码。</p>
</li>
<li><p><strong>Collection #1 (未经验证):</strong><br>2019年1月, 一份庞大的凭证填充列表（包含电子邮件地址和密码, 用于在其他服务上进行账号劫持）被发现被分发到一个受欢迎的黑客论坛。数据包含超过27亿条记录, 包括7.73亿个唯一的电子邮件地址和密码, 这些密码曾被用于其他被泄露的服务中。<br><strong>泄露数据:</strong> 电子邮件地址、密码。</p>
</li>
<li><p><strong>DLH.net:</strong><br>2016年7月, 游戏新闻网站 <a class="link"   href="https://www.dlh.net/" >DLH.net<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 发生数据泄露, 暴露了330万订阅者的身份信息。泄露包括用于在 <code>Steam</code> 平台上兑换和激活游戏的密钥, 暴露的信息包括电子邮件地址、出生日期和加盐的MD5密码哈希值。<br><strong>泄露数据:</strong> 出生日期、电子邮件地址、姓名、密码、用户名、网站活动。</p>
</li>
<li><p><strong>Gravatar:</strong><br>2020年10月, 一名安全研究员发布了一项技术, 用于从 <code>Gravatar</code> 服务中抓取大量数据, <code>Gravatar</code> 是提供全球唯一头像的服务。1.67亿个姓名、用户名和用于引用用户头像的 <code>MD5</code> 哈希值的电子邮件地址被抓取, 并在黑客社区中广泛传播。1.14亿个MD5哈希值被破解并与源哈希一起传播, 泄露了原始电子邮件地址和相关数据。<br><strong>泄露数据:</strong> 电子邮件地址、姓名、用户名。</p>
</li>
<li><p><strong>JD:</strong><br>2013年（确切日期不明）, 中国电子商务服务 <a class="link"   href="https://www.jd.com/" >JD<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 发生数据泄露, 暴露了13GB数据, 其中包含7700万个唯一的电子邮件地址。数据还包括用户名、电话号码和作为 <code>SHA-1</code> 哈希值存储的密码。<br><strong>泄露数据:</strong> 电子邮件地址、密码、电话号码、用户名。</p>
</li>
<li><p><strong>NetEase (未经验证):</strong><br>2015年10月, 报告称中国网站 <a class="link"   href="https://www.163.com/" >NetEase<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> (163.com)发生数据泄露, 影响了数亿订阅者。虽然有证据表明数据是合法的（多个 <code>HIBP</code> 订阅者确认他们使用的数据中的密码）, 但由于难以完全验证这一中国数据泄露事件, 因而标记为“未经验证”。泄露的数据包括电子邮件地址和明文密码。<br><strong>泄露数据:</strong> 电子邮件地址、密码。</p>
</li>
<li><p><strong>TGBUS (未经验证):</strong><br>大约在2017年, 据称中国游戏网站 <a class="link"   href="https://tgbus.com/" >TGBUS<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 发生了一次数据泄露, 影响了超过1000万独特订阅者。虽然有证据表明数据是合法的, 但由于难以完全验证这一中国数据泄露事件, 因而标记为“未经验证”。泄露的数据包括用户名、电子邮件地址和加盐的 <code>MD5</code> 密码哈希值。<br><strong>泄露数据:</strong> 电子邮件地址、密码、用户名。</p>
</li>
<li><p><strong>Youku:</strong><br>2016年末, 在线视频服务 <a class="link"   href="https://www.youku.com/" >Youku<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 发生数据泄露。事件暴露了9200万个唯一用户账户及其对应的 <code>MD5</code> 密码哈希值。<br><strong>泄露数据:</strong> 电子邮件地址、密码。</p>
</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>也就是说, 真正泄露 我账户的应该是 <code>Adobe</code>、<code>DLH.net</code>、<code>Gravatar</code>、<code>JD</code> 和 <code>优酷</code> 这几个网站, 所以大家最好定期修改密码且使用复杂一些的字符</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>ransomware</tag>
        <tag>scam</tag>
        <tag>勒索</tag>
        <tag>诈骗</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 子系统安装 Erlang OTP 19</title>
    <url>/posts/win10-wsl-erlang/</url>
    <content><![CDATA[<p>在 Windows 10 子系统安装 Erlang OTP 19</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>系统: <code>Windows 10 pro ×64</code></li>
<li>子系统: <code>wsl2 Ubuntu 18.04</code></li>
</ul>
<h2 id="添加镜像"><a href="#添加镜像" class="headerlink" title="添加镜像"></a>添加镜像</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>
<p>最后添加清华 <code>erlang-solutions</code> 源</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>sources.list</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ # qing hua erlang-solutions</span></span><br><span class="line"><span class="addition">+ deb https://mirrors.tuna.tsinghua.edu.cn/erlang-solutions/ubuntu/ bionic contrib</span></span><br></pre></td></tr></table></figure></div>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure></div>

<p>若失败提示 <code>The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY XXXXXXXXXXXX</code> 则复制最后的 <code>KEY</code>, 执行</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys XXXXXXXXXXXX</span><br></pre></td></tr></table></figure></div>

<p>若提示如下错误: </p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gpg: keyserver receive failed: Server indicated a failure</span><br></pre></td></tr></table></figure></div>

<p>则执行</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv XXXXXXXXXXXX</span><br></pre></td></tr></table></figure></div>

<p>将会看到:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Executing: /tmp/apt-key-gpghome.VehtZ71sTw/gpg.1.sh --keyserver hkp://keyserver.ubuntu.com:80 --recv XXXXXXXXXXXX</span><br><span class="line">gpg: key D208507CA14F4FCA: public key <span class="string">&quot;Erlang Solutions Ltd. &lt;packages@erlang-solutions.com&gt;&quot;</span> imported</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:               imported: 1</span><br></pre></td></tr></table></figure></div>

<p>然后再次执行 <code>sudo apt update</code> 即可</p>
<h2 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h2><p>可以选择安装特定版本, 也可以直接安装, 会自动安装最新版</p>
<h3 id="安装特定版本"><a href="#安装特定版本" class="headerlink" title="安装特定版本"></a>安装特定版本</h3><p>比如选择 <code>OTP 19</code> 安装</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install esl-erlang=1:19.*</span><br></pre></td></tr></table></figure></div>

<p>提示安装成功后, 测试</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">erl</span><br><span class="line">Erlang/OTP 19 [erts-8.3.5.7] [<span class="built_in">source</span>] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:<span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Ebash V8.3.5.7  (abort with ^G)</span><br><span class="line">1&gt;</span><br></pre></td></tr></table></figure></div>

<p>安装完成后记得把镜像地址注释掉, 否则下次更新系统会不小心升级版本</p>
<h3 id="安装最新版"><a href="#安装最新版" class="headerlink" title="安装最新版"></a>安装最新版</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install esl-erlang</span><br></pre></td></tr></table></figure></div>

<p><code>OTP 20</code> 以上自带支持 <code>history</code>, 方便在 shell 运行时记录执行过的命令, 添加环境变量</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ export ERL_AFLAGS=&quot;-kernel shell_history enabled&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>开启新终端 或 <code>source</code> 下 <code>.bashrc</code></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>erlang</tag>
        <tag>ubuntu</tag>
        <tag>win10</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 WP Super Cache 安装后无法使用</title>
    <url>/posts/wp-super-cache-not-working/</url>
    <content><![CDATA[<p>修改配置修复 WP Super Cache 插件安装后无法使用问题</p>
<span id="more"></span>

<h2 id="获取-wp-content-读写权限"><a href="#获取-wp-content-读写权限" class="headerlink" title="获取 wp-content 读写权限"></a>获取 wp-content 读写权限</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 /var/www/html/wordpress/wp-content/</span><br></pre></td></tr></table></figure></div>

<h2 id="检查-cache-文件"><a href="#检查-cache-文件" class="headerlink" title="检查 cache 文件"></a>检查 cache 文件</h2><p>进入 <code>wp-content</code> 目录</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/wordpress/wp-content</span><br></pre></td></tr></table></figure></div>

<p>检查 <code>wp-cache-config.php</code> 是否存在, 若不存在则:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> plugins/wp-super-cache/wp-cache-config-sample.php ./wp-cache-config.php</span><br></pre></td></tr></table></figure></div>

<p>检查 <code>advanced-cache.php</code> 是否存在, 若不存在则:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> plugins/wp-super-cache/advanced-cache.php ./</span><br></pre></td></tr></table></figure></div>
<p>并将这两个文件都开启可写入权限</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 wp-cache-config.php advanced-cache.php</span><br></pre></td></tr></table></figure></div>

<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>回到 <code>wordpress</code> 根目录, 在 <code>wp-config.php</code> 中 <code>ABSPATH</code> 之前添加两行</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>wp-config.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ define(&#x27;WP_CACHE&#x27;, true);</span></span><br><span class="line"><span class="addition">+ define(&#x27;WPCACHEHOME&#x27;,&#x27;/var/www/html/wordpress/wp-content/plugins/wp-super-cache/&#x27;);</span></span><br><span class="line"></span><br><span class="line">/** 设置WordPress变量和包含文件 */</span><br><span class="line">require_once( ABSPATH . &#x27;wp-settings.php&#x27; );</span><br></pre></td></tr></table></figure></div>

<p>刷新 <code>WordPress</code> 插件页面应该就不会报错了, 但会在 <code>WP Super Cache</code> 设置页面顶部提示 <code>/var/www/html/wordpress/wp-content</code> 权限问题, 此时先不要修改权限, 先 <code>启用缓存功能</code></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/wp-super-cache-not-working/img1.png"
                      alt="缓存功能"
                ><figcaption>缓存功能</figcaption></figure></p>
<p>保存更新后再执行</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 755 /var/www/html/wordpress/wp-content/</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>cache</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 XAMPP 和 Filezilla 搭建静态资源和 FTP 服务</title>
    <url>/posts/xampp-statistics-ftp-server/</url>
    <content><![CDATA[<p>搭建静态资源和 <code>FTP</code> 服务, 便于管理网站的静态资源文件</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>系统: Ubuntu 20.04 TLS</li>
<li>服务: Apache2</li>
<li>工具: Filezilla</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要先安装 <code>XAMPP</code>, 即 <code>Apache</code> + <code>MySQL</code> + <code>PHP</code> + <code>PERL</code>, 它是一个功能强大的建站集成软件包, 这个软件包原来的名字是 <code>LAMPP</code>, 但是为了避免误解, 现已改名为 <code>XAMPP</code> 了<br>下载地址: <a class="link"   href="https://www.apachefriends.org/download.html" >XAMPP 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 选择 <code>Linux</code> 版本</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x xampp-linux-x64-7.4.8-0-installer.run*</span><br><span class="line">sudo ./xampp-linux-x64-7.4.8-0-installer.run*</span><br></pre></td></tr></table></figure></div>

<p>然后一路默认安装即可</p>
<h2 id="静态资源服务"><a href="#静态资源服务" class="headerlink" title="静态资源服务"></a>静态资源服务</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>XAMPP</code> 默认的网站目录都是在 <code>/opt/lampp/htdocs</code> 下的, 所有我们可以直接将静态资源目录链接到该目录下就可以了, 比如自定义的静态资源路径在 <code>/server/static</code> 下, 则</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /server/static /opt/lampp/htdocs/static</span><br></pre></td></tr></table></figure></div>

<p>然后浏览器访问 <a class="link"   href="http://www.domain.com/static" >http://www.domain.com/static<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 就能看到静态资源的目录结构了</p>
<p><figure class="image-caption"><img src="/images/posts/xampp-statistics-ftp-server/img1.png" alt="http://www.domain.com/static"><figcaption>http://www.domain.com/static</figcaption></figure></p>
<h3 id="升级-HTTPS"><a href="#升级-HTTPS" class="headerlink" title="升级 HTTPS"></a>升级 HTTPS</h3><p>升级 <code>TSL</code> 为 <code>HTTPS</code> 提高安全性, 可以在 阿里云SSL 控制面里生成 <code>CA</code> 证书或者在服务器手动生成也行, 将证书文件放在服务器自定义目录下, 如：<code>/server/cert</code></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/etc/extra/httpd-ssl.conf</span><br></pre></td></tr></table></figure></div>

<p>然后修改参数</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>httpd-ssl.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">ServerName www.domain.com</span><br><span class="line"># 跨域</span><br><span class="line">Header set Access-Control-Allow-Origin *</span><br><span class="line"># 并找到下面三个参数修改为自定义证书路径</span><br><span class="line">SSLCertificateFile &quot;/server/cert/cert.crt&quot;</span><br><span class="line">SSLCertificateKeyFile &quot;/server/cert/cert.key&quot;</span><br><span class="line">SSLCertificateChainFile &quot;/server/cert/chain.crt&quot;</span><br></pre></td></tr></table></figure></div>

<p>保存并重启 <code>Apache</code> 服务即可用 <a class="link"   href="https://www.domain.com/" >https://www.domain.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 访问</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restartapache</span><br><span class="line"><span class="comment"># 会打印</span></span><br><span class="line">XAMPP: Stopping Apache...ok.</span><br><span class="line">XAMPP: Starting Apache...ok.</span><br></pre></td></tr></table></figure></div>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>静态资源服务页面里, 如果有中文会默认显示成乱码, 所以可以添加字符编码配置</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/etc/httpd.conf</span><br></pre></td></tr></table></figure></div>

<p>添加一行</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>httpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ IndexOptions Charset=UTF-8</span></span><br></pre></td></tr></table></figure></div>

<p>保存并重启 <code>Apache</code> 服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restartapache</span><br><span class="line"><span class="comment"># 会打印</span></span><br><span class="line">XAMPP: Stopping Apache...ok.</span><br><span class="line">XAMPP: Starting Apache...ok.</span><br></pre></td></tr></table></figure></div>

<h2 id="FTP-服务"><a href="#FTP-服务" class="headerlink" title="FTP 服务"></a>FTP 服务</h2><p>上面部署了静态资源服务器, 为了方便更新资源, 搭建 <code>FTP</code> 服务器会方便很多</p>
<h3 id="添加-ftp-用户"><a href="#添加-ftp-用户" class="headerlink" title="添加 ftp 用户"></a>添加 ftp 用户</h3><p>先创建 <code>ftp</code> 专用的用户组, 名字随意, 但为了区分所以带上 <code>ftp</code> 字样</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> groupadd ftpusers</span><br></pre></td></tr></table></figure></div>

<p>然后往该组添加一个用户</p>
<ul>
<li><code>-d</code> 表示该用户 <code>home</code> 目录, 这里用上面静态资源服务器目录地址</li>
<li><code>-g</code> 表示隶属于哪个用户组</li>
<li><code>-s</code> 表示此用户的 <code>shell</code> 环境, 最后是用户名</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> useradd -d /server/static -g ftpusers -s /usr/sbin/nologin userftp</span><br></pre></td></tr></table></figure></div>

<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> passwd userftp</span><br></pre></td></tr></table></figure></div>

<h3 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> userftp:ftpusers /server/static</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 /server/static</span><br></pre></td></tr></table></figure></div>

<h3 id="添加-shell-有效登录方式"><a href="#添加-shell-有效登录方式" class="headerlink" title="添加 shell 有效登录方式"></a>添加 shell 有效登录方式</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/shells</span><br></pre></td></tr></table></figure></div>

<p>在最后一行添加</p>
<div class="code-container" data-rel="Diff"><figure class="iseeu highlight diff"><figcaption><span>shells</span></figcaption><table><tr><td class="code"><pre><span class="line">/usr/sbin/nologin</span><br></pre></td></tr></table></figure></div>

<h3 id="配置-ProFTPD"><a href="#配置-ProFTPD" class="headerlink" title="配置 ProFTPD"></a>配置 ProFTPD</h3><p>修改配置文件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /opt/lampp/etc/proftpd.conf</span><br></pre></td></tr></table></figure></div>

<p>修改下方参数</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>proftpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">ServerName &quot;Your Any Name&quot; # 保留双引号</span><br><span class="line">Port 2121 # 自定义端口安全点</span><br><span class="line">&lt;Directory /server/static/*&gt;</span><br><span class="line">    AllowOverwrite on # 允许重写, 这样才能覆盖更新文件</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">DefaultRoot ~ # 只允许在 home 目录下</span><br></pre></td></tr></table></figure></div>

<p>然后重启服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /opt/lampp/lampp restart</span><br><span class="line"><span class="comment"># 会打印</span></span><br><span class="line">Restarting XAMPP <span class="keyword">for</span> Linux 7.4.8-0...</span><br><span class="line">XAMPP: Stopping Apache...ok.</span><br><span class="line">XAMPP: Stopping MySQL...not running.</span><br><span class="line">XAMPP: Stopping ProFTPD...ok.</span><br><span class="line">XAMPP: Starting Apache...ok.</span><br><span class="line">XAMPP: Starting MySQL...ok.</span><br><span class="line">XAMPP: Starting ProFTPD...ok.</span><br></pre></td></tr></table></figure></div>

<h3 id="使用-FileZilla-连接-FTP-服务器"><a href="#使用-FileZilla-连接-FTP-服务器" class="headerlink" title="使用 FileZilla 连接 FTP 服务器"></a>使用 FileZilla 连接 FTP 服务器</h3><p>安装 <code>FileZilla</code> 客户端, 下载地址：<a class="link"   href="https://filezilla-project.org/download.php?type=client" >FileZilla 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安装完成后, 打开 <code>FileZilla</code>, 点击左上角 “文件” 下方的 <code>打开站点管理器</code> → <code>我的站点</code> → <code>新站点</code> → <code>命名</code> → <code>常规</code> 添加配置</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/xampp-statistics-ftp-server/img2.png"
                      alt="FileZilla 客户端"
                ><figcaption>FileZilla 客户端</figcaption></figure></p>
<ul>
<li>协议: <code>FTP</code> – 文件传输协议</li>
<li>主机: 你的服务器域名</li>
<li>端口: 上面 <a href="/posts/xampp-statistics-ftp-server/#%E9%85%8D%E7%BD%AE-ProFTPD">自定义配置的端口</a></li>
<li>用户和密码: 也是上面添加的 <a href="/posts/xampp-statistics-ftp-server/#%E6%B7%BB%E5%8A%A0-ftp-%E7%94%A8%E6%88%B7">用户和密码</a></li>
<li>字符集标签页: 勾选 <code>强制 UTF-8</code>, 否则 <code>FTP</code> 服务器中文目录会显示乱码</li>
</ul>
<p>然后点击 <code>确定</code> 保存</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/posts/xampp-statistics-ftp-server/img3.png"
                      alt="FileZilla 客户端"
                ><figcaption>FileZilla 客户端</figcaption></figure></p>
<p>最后回到主界面 <code>打开站点管理器</code> 旁边的下拉菜单, 点击刚刚添加的配置名字即可连接上 <code>FTP</code> 服务器</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>apache</tag>
        <tag>xampp</tag>
        <tag>Filezilla</tag>
        <tag>statistics</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
</search>
